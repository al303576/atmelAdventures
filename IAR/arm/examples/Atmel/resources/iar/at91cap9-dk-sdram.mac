// ---------------------------------------------------------
//   ATMEL Microcontroller Software Support  -  ROUSSET  -
// ---------------------------------------------------------
// The software is delivered "AS IS" without warranty or
// condition of any  kind, either express, implied or
// statutory. This includes without limitation any warranty
// or condition with respect to merchantability or fitness
// for any particular purpose, or against the infringements of
// intellectual property rights of others.
// ---------------------------------------------------------
//  File: CAP9_SDRAM.mac
//  User setup file for CSPY debugger.
//  1.1 20/Dec/07 oar    : Creation
//
//  $Revision: 35927 $
//
// ---------------------------------------------------------
__var __mac_i;
__var __mac_pt;
__var __val_tmp;

/*********************************************************************
*
*       execUserReset() : JTAG set initially to Full Speed
*/
execUserReset()
{
    __message "------------------------------ execUserReset ---------------------------------";
    _MapRAMAt0();                          //* Set the RAM memory at 0x00200000 & 0x00000000
    __PllSetting();                        //* Init PLL
    __PllSetting100MHz();
    __message "-------------------------------Set PC Reset ----------------------------------";
}

/*********************************************************************
*
*       execUserPreload() : JTAG set initially to 32kHz
*/
execUserPreload()
{
    __message "------------------------------ execUserPreload ---------------------------------";
    __hwReset(0);                          //* Hardware Reset: CPU is automatically halted after the reset (JTAG is already configured to 32kHz)
    __writeMemory32(0xD3,0x98,"Register"); //*  Set CPSR
    __PllSetting();                        //* Init PLL
    __PllSetting100MHz();
    __initSDRAM();                         //* Init SDRAM before load
    _MapRAMAt0();                          //* Set the RAM memory at 0x0020 0000 & 0x0000 0000
    _InitRSTC();                           //* Enable User Reset to allow execUserReset() execution
}



/*********************************************************************
*
*       _InitRSTC()
*
* Function description
*   Initializes the RSTC (Reset controller).
*   This makes sense since the default is to not allow user resets, which makes it impossible to
*   apply a second RESET via J-Link
*/
_InitRSTC() {
    __writeMemory32(0xA5000001, 0xFFFFFD08,"Memory");    // Allow user reset
}


/*********************************************************************
*
*       __initSDRAM()
* Function description
* Set SDRAM for works at 100 MHz
*/
__initSDRAM()
{
    __val_tmp = __readMemory32(0xFFFFEB20,"Memory");
    __message "----- TMP1 AT91C_BASE_CCFG->CCFG_EBICSA  : 0x",__val_tmp:%X;        
    
//	AT91C_BASE_CCFG->CCFG_EBICSA |= AT91C_EBI_SUP_3V3;  // Vddiomsel 3.3V // 0x00010000 reset value
    __writeMemory32(0x00010000,0xFFFFEB20,"Memory");

    __val_tmp = __readMemory32(0xFFFFEB20,"Memory");
    __message "----- TMP2 AT91C_BASE_CCFG->CCFG_EBICSA  : 0x",__val_tmp:%X;  

//*  Configure PIOs
// D0 to D15 are dedicated / D16 to D31 are multiplexed
//*	AT91F_PIO_CfgPeriph( AT91C_BASE_PIOD, AT91C_PD16_D16 to AT91C_PD31_D31
// pPio->PIO_ASR = periphAEnable; AT91C_PIOD_ASR ((AT91_REG *) 0xFFFFF870) // (PIOD) Select A Register
// pPio->PIO_BSR = periphBEnable;AT91C_PIOD_BSR  ((AT91_REG *) 0xFFFFF874) // (PIOD) Select B Register
// pPio->PIO_PDR = (periphAEnable | periphBEnable); // Set in Periph mode
    __writeMemory32(0xFFFF0000,0xFFFFF870,"Memory");
    __writeMemory32(0x00000000,0xFFFFF874,"Memory");
    __writeMemory32(0xFFFF0000,0xFFFFF804,"Memory");

// ----------------------------------------------------------------------------

//	ddrc->SDDRC_MDR	= 0x00000000;			// 32bit MODE; SDRAM type
    __writeMemory32(0x00000000,0xFFFFE61C,"Memory");

//	ddrc->SDDRC_CR	= 0x00000039;			// row = 13, column = 9 SDRAM CAS = 3
    __writeMemory32(0x00000039,0xFFFFE608,"Memory");

//	ddrc->SDDRC_LPR	= 0x00000000;			// Low power register => Low-power is inhibited
    __writeMemory32(0x00000000,0xFFFFE618,"Memory");

// ----------------------------------------------------------------------------


// sleep_time(50000);						// --------- WAIT ---------
    __delay(50);

// ddrc->SDDRC_MR		= 0x00000001;		// NOP command
//	*ddr_array_bottom	= 0x00000000;		// Dummy read to access SDRAM : validate preceeding command
    __writeMemory32(0x00000001,0xFFFFE600,"Memory");
    __writeMemory32(0x00000000,0x70000000,"Memory");

//	ddrc->SDDRC_MR		= 0x00000001;		// NOP command
//	*ddr_array_bottom	= 0x00000000;		// Dummy read to access SDRAM : validate preceeding command
    __writeMemory32(0x00000001,0xFFFFE600,"Memory");
    __writeMemory32(0x00000000,0x70000000,"Memory");

//	ddrc->SDDRC_MR		= 0x00000001;		// NOP command
//	*ddr_array_bottom	= 0x00000000;		// Dummy read to access SDRAM : validate preceeding command
    __writeMemory32(0x00000001,0xFFFFE600,"Memory");
    __writeMemory32(0x00000000,0x70000000,"Memory");

// ddrc->SDDRC_MR		= 0x00000002;		// Precharge All Banks command
//	*ddr_array_bottom	= 0x00000000;		// Dummy read to access SDRAM : validate preceeding command
    __writeMemory32(0x00000002,0xFFFFE600,"Memory");
    __writeMemory32(0x00000000,0x70000000,"Memory");

// sleep_time(50000);						// --------- WAIT ---------
    __delay(50);

// ddrc->SDDRC_MR		= 0x00000004;		// AutoRefresh command
// *ddr_array_bottom	= 0x00000000;		// Dummy read to access SDRAM : validate preceeding command
    __writeMemory32(0x00000004,0xFFFFE600,"Memory");
    __writeMemory32(0x00000000,0x70000000,"Memory");

// sleep_time(50000);						// --------- WAIT ---------
    __delay(50);

//	ddrc->SDDRC_MR		= 0x00000004;		// AutoRefresh command
//	*ddr_array_bottom	= 0x00000000;		// Dummy read to access SDRAM : validate preceeding command
    __writeMemory32(0x00000004,0xFFFFE600,"Memory");
    __writeMemory32(0x00000000,0x70000000,"Memory");

//  sleep_time(50000);						// --------- WAIT ---------
    __delay(50);

// ----------------------------------------------------------------------------

//	ddrc->SDDRC_MR		= 0x00000003;		// Set MR JEDEC compliant : Load mode Register command
//	*((unsigned long *)(SDRAM_BASE+0x20)) = 0x5a5a5b5b;	// Perform LMR burst=1, lat=2
    __writeMemory32(0x00000003,0xFFFFE600,"Memory");
    __writeMemory32(0x5a5a5b5b,0x70000020,"Memory");

//	ddrc->SDDRC_MR		= 0x00000000;		// Set Normal mode : Any access to the DDRSDRAMC is decoded normally
//	*ddr_array_bottom	= 0x00000000;		// Dummy read to access SDRAM : validate preceeding command
    __writeMemory32(0x00000000,0xFFFFE600,"Memory");
    __writeMemory32(0x00000000,0x70000000,"Memory");

// ddrc->SDDRC_RTR	= 781;					// Set Refresh Timer (ex: ((64 x 10^-3)/8192) x 50 x 10^6 )									// 781 for 100 MHz
    __writeMemory32(781,0xFFFFE604,"Memory");

// ddrc->SDDRC_HS	= 0x02;					// High speed register : Optimization is disabled
    __writeMemory32(0x00000002,0xFFFFE614,"Memory");

// sleep_time(50000);
    __delay(50);

    __message "------------------------------- SDRAM Done at 100 MHz -------------------------------";
}

/*********************************************************************
*
*       _MapRAMAt0()
* Function description
* Remap RAM at 0
*/
_MapRAMAt0()
{
// AT91C_MATRIX_MRCR ((AT91_REG *) 	0xFFFFEB00) // (MATRIX)  Master Remp Control Register
    __mac_i=__readMemory32(0xFFFFEB00,"Memory");
    __message "----- AT91C_MATRIX_MRCR  : 0x",__mac_i:%X;

    if ( ((__mac_i & 0x01) == 0) || ((__mac_i & 0x02) == 0)){
        __message "------------------------------- The Remap is NOT & REMAP ----------------------------";
    __writeMemory32(0x00000003,0xFFFFEB00,"Memory");
        __mac_i=__readMemory32(0xFFFFEB00,"Memory");
        __message "----- AT91C_MATRIX_MRCR  : 0x",__mac_i:%X;
    } else {
        __message "------------------------------- The Remap is done -----------------------------------";
    }
}


/*********************************************************************
*
*       __PllSetting()
* Function description
*   Initializes the PMC.
*   1. Enable the Main Oscillator
*   2. Configure PLL
*   3. Switch Master
*/
__PllSetting()
{
    // The selected clock is the Slow Clock ?
    if ((__readMemory32(0xFFFFFC30,"Memory")&0x3) != 0 ) // AT91C_PMC_MCKR
    { 
        // Disable all PMC interrupt
        // AT91C_PMC_IDR   ((AT91_REG *) 0xFFFFFC64) //(PMC) Interrupt Disable Register
        __writeMemory32(0xFFFFFFFF,0xFFFFFC64,"Memory");
    
        // Stop all peripheral clock
        // AT91C_PMC_PCDR  ((AT91_REG *) 0xFFFFFC14) //(PMC) Peripheral Clock Disable Register
        __writeMemory32(0xFFFFFFFF,0xFFFFFC14,"Memory");
    
        // Disable all clocks. Only Processor clock is enabled.    
        // AT91C_PMC_SCDR  ((AT91_REG *) 0xFFFFFC04) //(PMC) System Clock Disable Register
        __writeMemory32(0xFFFFFFFE,0xFFFFFC04,"Memory"); // AT91C_PMC_SCDR

        // AT91C_PMC_MCKR  ((AT91_REG *) 	0xFFFFFC30) // (PMC) Master Clock Register // main clock is selected
        __writeMemory32(0x00000001,0xFFFFFC30,"Memory");
        __delay(10);

        // write reset value to PLLA and PLLB
        // AT91C_PMC_PLLAR ((AT91_REG *) 	0xFFFFFC28) // (PMC) PLL A Register
        __writeMemory32(0x00003F00,0xFFFFFC28,"Memory");

        // AT91C_PMC_PLLBR ((AT91_REG *) 	0xFFFFFC2C) // (PMC) PLL B Register
        __writeMemory32(0x00003F00,0xFFFFFC2C,"Memory");
        __delay(10);

       __message "------------------------------- PLL  Enable -----------------------------------------";
   }
   else
   {
       __message " ********* Core in SLOW CLOCK mode ********* "; 
   }
}


/*********************************************************************
*
*       __PllSetting100MHz()
* Function description
*   Set core at 200 MHz and MCK at 100 MHz
*/
__PllSetting100MHz()
{

   __message "------------------------------- PLL Set at 100 MHz ----------------------------------";

//* pPmc->PMC_MOR = (( AT91C_CKGR_OSCOUNT & (0x40 <<8) | AT91C_CKGR_MOSCEN ));
    __writeMemory32(0x00004001,0xFFFFFC20,"Memory");
    __delay(10);
// AT91C_PMC_MCKR  ((AT91_REG *) 	0xFFFFFC30) // (PMC) Master Clock Register
    __writeMemory32(0x00000001,0xFFFFFC30,"Memory");
    __delay(10);
//*   AT91C_BASE_CKGR->CKGR_PLLAR = (AT91C_CKGR_SRCA | ((49 << 16) & AT91C_CKGR_MULA) |
//    (AT91C_CKGR_PLLACOUNT | (AT91C_CKGR_OUTA_0 | (3);
    __writeMemory32(0x2031BF03,0xFFFFFC28,"Memory");
    __delay(10);
//*   AT91C_BASE_PMC->PMC_MCKR =  AT91C_PMC_CSS_PLLA_CLK | AT91C_PMC_PRES_CLK | AT91C_PMC_MDIV_2;;
    __writeMemory32(0x00000102,0xFFFFFC30,"Memory");
     __delay(10);

}

