// ---------------------------------------------------------
//   ATMEL Microcontroller Software Support  -  ROUSSET  -
// ---------------------------------------------------------
// The software is delivered "AS IS" without warranty or
// condition of any  kind, either express, implied or
// statutory. This includes without limitation any warranty
// or condition with respect to merchantability or fitness
// for any particular purpose, or against the infringements of
// intellectual property rights of others.
// ---------------------------------------------------------
//  File: at91cap9-dk-ddram.mac
//  User setup file for CSPY debugger.
//  1.1 20/Dec/07 oar    : Creation
//
//  $Revision: 35927 $
//
// ---------------------------------------------------------
__var __mac_i;
__var dummy_read;

/*********************************************************************
*
*       execUserReset() : JTAG set initially to Full Speed
*/
execUserReset()
{
    __message "------------------------------ execUserReset ---------------------------------";
    // Do nothing. If PLL reconfigured, DDRAM data lost
    //_MapRAMAt0();                          //* Set the RAM memory at 0x00200000 & 0x00000000
    //__PllSetting();                        //* Init PLL
    //__PllSetting100MHz();
    __message "-------------------------------Set PC Reset ----------------------------------";
}

/*********************************************************************
*
*       execUserPreload() : JTAG set initially to 32kHz
*/
execUserPreload()
{
    __message "------------------------------ execUserPreload ---------------------------------";
    __hwReset(0);                          //* Hardware Reset: CPU is automatically halted after the reset (JTAG is already configured to 32kHz)
    __writeMemory32(0xD3,0x98,"Register"); //*  Set CPSR
    __PllSetting();                        //* Init PLL
    __PllSetting100MHz();
    __initDDR();                           //* Init DDRAM before load
    _MapRAMAt0();                          //* Set the RAM memory at 0x0020 0000 & 0x0000 0000
    _InitRSTC();                           //* Enable User Reset to allow execUserReset() execution
}



/*********************************************************************
*
*       _InitRSTC()
*
* Function description
*   Initializes the RSTC (Reset controller).
*   This makes sense since the default is to not allow user resets, which makes it impossible to
*   apply a second RESET via J-Link
*/
_InitRSTC() {
    __writeMemory32(0xA5000001, 0xFFFFFD08,"Memory");    // Allow user reset
}


/*********************************************************************
*
*       __initDDRAM()
* Function description
* Set DDRAM for works at 100 MHz
*/

//-----------------------------------------------------------------------------
// DDR Memory initialization
//-----------------------------------------------------------------------------
__initDDR()
{
    __message "-------------------------------Init DDRAM ----------------------------------";

    __writeMemory32(0x00000002,0xFFFFFC00,"Memory"); //AT91C_BASE_PMC->PMC_SCER = (0x1 << 2);

    // Ensure that Matrix is connected to enable fetch Data & PDC
    __writeMemory32(0x00000007,0xFFFFEB00,"Memory");
    //  *AT91C_MATRIX_MRCR |= AT91C_MATRIX_RCA926I | AT91C_MATRIX_RCA926D  | AT91C_MATRIX_RCB2;

    __delay(20);

    // First, enable the clock of the PIO
    __writeMemory32(0x00000085,0xFFFFFC00,"Memory");  // Enable PIO A B C D

    __delay(20);

    // AT91C_BASE_CCFG->CCFG_EBICSA = 0x00000000;
    __writeMemory32(0x00000000,0xFFFFEB20,"Memory");

    __delay(20);

// ------------------------------------------------------------------------------------

    // Step 1: program the memory device type into Memory Device Register
    // Memory Device Register
    // Mobile DDRAM type | 16bit MODE
    // ddrc->SDDRC_MDR  = 0x00000013;
    __writeMemory32(0x00000013,0xFFFFE61C,"Memory");
    __delay(20);

    // Step 2: program the features of the Mobile DDR into the Configuration Register
    //         number of columns, rows, banks and cas latency  
    // Configuration Register
    // Normal driver strength(0) | Disable DLL reset(0) | SDRAM CAS = 3 | row = 13 | column = 9
    // ddrc->SDDRC_CR   = 0x00000038;
    __writeMemory32(0x00000038,0xFFFFE608,"Memory");
    __delay(20);

    // Timing 0 Parameter Register
    // tmrd = 2 | twtr = 1 | trrd = 2 | trrd = 2 | trp = 3 | trc = 8 | twr = 2 | trcd = 3 | tras = 5   
    // ddrc->SDDRC_T0PR = 0x21238235;
    __writeMemory32(0x21238235,0xFFFFE60C,"Memory");
    __delay(20);

    // Timing 1 Parameter Register
    // txp = 4 | txsrd = 0xC | txsnr = 0xC | trfc = 9
    // ddrc->SDDRC_T1PR = 0x040C0C09;
    __writeMemory32(0x040C0C09,0xFFFFE610,"Memory");
    __delay(20);

    // Step 3: program temperature compensated self refresh (tcr), 
    // Partial array self refresh (pasr) 
    // and Drive strength (ds) into the Low-power Register. 
   
    // Low-power Register   
    // Low power register => Low-power is inhibited
    // all bank refresh during self refresh (PASR = b000)   
    // ddrc->SDDRC_LPR  = 0x00000000; 

    // do nothing

   __delay(20);                                   //  wait_time(200);

// ------------------------------------------------------------------------------------

    // Step 4: perform a NOP command in order to allow to enable clk    
    // NOP command
    // ddrc->SDDRC_MR = 0x00000001;
    __writeMemory32(0x00000001,0xFFFFE600,"Memory");
    __delay(20);
    __writeMemory32(0x00000000,0x70000000,"Memory");
    __delay(20);
 
    // Step 5: perform an All Banks Precharge command   
    // Precharge All Banks command
    // ddrc->SDDRC_MR = 0x00000002;
    __writeMemory32(0x00000002,0xFFFFE600,"Memory");
    __delay(20);
    __writeMemory32(0x00000000,0x70000000,"Memory");
    __delay(100);
 
    // Step 6: two auto refresh cycles are provided   
 
    // AutoRefresh command (first cycle)
    // ddrc->SDDRC_MR = 0x00000004;
    __writeMemory32(0x00000004,0xFFFFE600,"Memory");
    __delay(20);
    __writeMemory32(0x00000000,0x70000000,"Memory");
    __delay(100);
 
    // AutoRefresh command (second cycle)
    // ddrc->SDDRC_MR = 0x00000004;
    __writeMemory32(0x00000004,0xFFFFE600,"Memory");
    __delay(20);
    __writeMemory32(0x00000000,0x70000000,"Memory");
    __delay(100);

// ----------------------------------------------------------------------------------

    // Step 7: an extended mode register set cycle is issued   
    // Extended Mode Register Set command
    // ddrc->SDDRC_MR = 0x00000005;
    __writeMemory32(0x00000005,0xFFFFE600,"Memory");
    __delay(20);
    __writeMemory32(0x00000000,0x71000000,"Memory");
    __delay(20);
 
    // Step 8: a mode register set cycle is issued   
    // Mode Register Set command
    // ddrc->SDDRC_MR = 0x00000003;
    __writeMemory32(0x00000003,0xFFFFE600,"Memory");
    __delay(20);
    __writeMemory32(0x00000000,0x70000000,"Memory");
    __delay(20);
 
    // Step 9: Set Normal mode  
    // ddrc->SDDRC_MR = 0x00000000;
    __writeMemory32(0x00000000,0xFFFFE600,"Memory");
    __delay(20);
    __writeMemory32(0x00000000,0x70000000,"Memory");
    __delay(20);
    
    // Step 10: Perform a write access to any DDR-SDRAM address         
    __writeMemory32(0x00000000,0x70000000,"Memory");
    __delay(20);
 
    // a third write to avoid DLL fine tuning
    __writeMemory32(0x00000000,0x70000000,"Memory");
    __delay(20); 

    // Step 11: Set Refresh timer  
    // Set Refresh Timer : ((64 x 10^-3)/8192) x 48 x 10^6   --->  375 for 48 MHz
    // Set Refresh Timer : ((64 x 10^-3)/8192) x 100 x 10^6   --->  781 for 100 MHz
    __writeMemory32(0x0000044C,0xFFFFE604,"Memory"); //  ddrc->SDDRC_RTR    = 781;
    __delay(20);
    
    // High speed register : Optimization is enabled
    __writeMemory32(0x00000000,0xFFFFE614,"Memory"); //  ddrc->SDDRC_HS     = 0x00;
    __delay(20);
 
    __message "------------------------------- DDRAM Done at 100 MHz -------------------------------";
}

/*********************************************************************
*
*       _MapRAMAt0()
* Function description
* Remap RAM at 0
*/
_MapRAMAt0()
{
// AT91C_MATRIX_MRCR ((AT91_REG *) 	0xFFFFEB00) // (MATRIX)  Master Remp Control Register
    __mac_i=__readMemory32(0xFFFFEB00,"Memory");
    __message "----- AT91C_MATRIX_MRCR  : 0x",__mac_i:%X;

    if ( ((__mac_i & 0x01) == 0) || ((__mac_i & 0x02) == 0)){
        __message "------------------------------- The Remap is NOT & REMAP ----------------------------";
    __writeMemory32(0x00000003,0xFFFFEB00,"Memory");
        __mac_i=__readMemory32(0xFFFFEB00,"Memory");
        __message "----- AT91C_MATRIX_MRCR  : 0x",__mac_i:%X;
    } else {
        __message "------------------------------- The Remap is done -----------------------------------";
    }
}

/*********************************************************************
*
*       __PllSetting()
* Function description
*   Initializes the PMC.
*   1. Enable the Main Oscillator
*   2. Configure PLL
*   3. Switch Master
*/
__PllSetting()
{
    // The selected clock is the Slow Clock ?
    if ((__readMemory32(0xFFFFFC30,"Memory")&0x3) != 0 ) // AT91C_PMC_MCKR
    {
        // Disable all PMC interrupt
        // AT91C_PMC_IDR   ((AT91_REG *) 0xFFFFFC64) //(PMC) Interrupt Disable Register
        __writeMemory32(0xFFFFFFFF,0xFFFFFC64,"Memory");

        // Stop all peripheral clock
        // AT91C_PMC_PCDR  ((AT91_REG *) 0xFFFFFC14) //(PMC) Peripheral Clock Disable Register
        __writeMemory32(0xFFFFFFFF,0xFFFFFC14,"Memory");

        // Disable all clocks. Only Processor clock is enabled.
        // AT91C_PMC_SCDR  ((AT91_REG *) 0xFFFFFC04) //(PMC) System Clock Disable Register
        __writeMemory32(0xFFFFFFFE,0xFFFFFC04,"Memory"); // AT91C_PMC_SCDR

        // AT91C_PMC_MCKR  ((AT91_REG *) 	0xFFFFFC30) // (PMC) Master Clock Register // main clock is selected
        __writeMemory32(0x00000001,0xFFFFFC30,"Memory");
        __delay(10);

        // write reset value to PLLA and PLLB
        // AT91C_PMC_PLLAR ((AT91_REG *) 	0xFFFFFC28) // (PMC) PLL A Register
        __writeMemory32(0x00003F00,0xFFFFFC28,"Memory");

        // AT91C_PMC_PLLBR ((AT91_REG *) 	0xFFFFFC2C) // (PMC) PLL B Register
        __writeMemory32(0x00003F00,0xFFFFFC2C,"Memory");
        __delay(10);

       __message "------------------------------- PLL  Enable -----------------------------------------";
   }
   else
   {
       __message " ********* Core in SLOW CLOCK mode ********* ";
   }
}


/*********************************************************************
*
*       __PllSetting100MHz()
* Function description
*   Set core at 200 MHz and MCK at 100 MHz
*/
__PllSetting100MHz()
{

   __message "------------------------------- PLL Set at 100 MHz ----------------------------------";

//* pPmc->PMC_MOR = (( AT91C_CKGR_OSCOUNT & (0x40 <<8) | AT91C_CKGR_MOSCEN ));
    __writeMemory32(0x00004001,0xFFFFFC20,"Memory");
    __delay(10);
// AT91C_PMC_MCKR  ((AT91_REG *) 	0xFFFFFC30) // (PMC) Master Clock Register
    __writeMemory32(0x00000001,0xFFFFFC30,"Memory");
    __delay(10);
//*   AT91C_BASE_CKGR->CKGR_PLLAR = (AT91C_CKGR_SRCA | ((49 << 16) & AT91C_CKGR_MULA) |
//    (AT91C_CKGR_PLLACOUNT | (AT91C_CKGR_OUTA_0 | (3);
    __writeMemory32(0x2031BF03,0xFFFFFC28,"Memory");
    __delay(10);
//*   AT91C_BASE_PMC->PMC_MCKR =  AT91C_PMC_CSS_PLLA_CLK | AT91C_PMC_PRES_CLK | AT91C_PMC_MDIV_2;;
    __writeMemory32(0x00000102,0xFFFFFC30,"Memory");
     __delay(10);

}

