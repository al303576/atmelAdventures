//  ----------------------------------------------------------------------------
//          ATMEL Microcontroller Software Support  -  ROUSSET  -
//  ----------------------------------------------------------------------------
//  DISCLAIMER:  THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
//  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
//  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
//  DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  ----------------------------------------------------------------------------
//  File Name           : SAM7SE_SDRAM.mac
//  Object              : Generic Macro File for IAR
//  1.0 17/Aug/05 FBr   : Creation
//  ----------------------------------------------------------------------------

__var __mac_i;
__var __mac_mem;
__var __mac_next;

/*********************************************************************
*
*       _MapFlashAt0()
*
* Function description
*   Maps FLASH at 0.
*/
_MapFlashAt0(){
    __mac_mem =__readMemory32(0x00000000,"Memory");
    __mac_i =__mac_mem+1;
    __writeMemory32(__mac_i,0x00,"Memory");
    __mac_next =__readMemory32(0x00000000,"Memory");
    
    if (__mac_i == __mac_next) {
        __writeMemory32( __mac_mem,0x00000000,"Memory");
         __message "Changing mapping: mapping FLASH at 0x0000_0000";
        __writeMemory32(0x00000001,0xFFFFFF00,"Memory");
        __message "RAM at 0x0000_0000";  
    } else {  
        __message "Flash is mapped at 0x0000 0000";  
    }
}

/*********************************************************************
*
*       _MapRAMAt0()
*
* Function description
*   Maps RAM at 0.
*/
_MapRAMAt0(){
    __message "Changing mapping: RAM mapped to 0";
    __writeMemory32(0x00000001,0xFFFFFF00,"Memory");
}

/*********************************************************************
*
*       __initSDRAM()
* Function description
* Set SDRAM for works at 48 MHz
*/
__initSDRAM()
{
//* Enable clock on EBI pios
//  pPMC->PMC_PCER = AT91C_EBI_CS1A_SDRAMC;
//  PMC_PCER        ((AT91_REG *)  0xFFFFFC10) // (PMC_PCER) Peripheral Clock Enable Register
    __writeMemory32(0x0000001C,0xFFFFFC10,"Memory");

//*  Configure PIOs
    __writeMemory32(0x00000000,0xFFFFF470,"Memory");
    __writeMemory32(0x3F800000,0xFFFFF474,"Memory");
    __writeMemory32(0x3F800000,0xFFFFF404,"Memory");

    __writeMemory32(0x00000000,0xFFFFF670,"Memory");	
    __writeMemory32(0x0003FFFF,0xFFFFF674,"Memory");	
    __writeMemory32(0x0003FFFF,0xFFFFF604,"Memory");	

    __writeMemory32(0x0000FFFF,0xFFFFF870,"Memory");
    __writeMemory32(0x00000000,0xFFFFF874,"Memory");
    __writeMemory32(0x0000FFFF,0xFFFFF804,"Memory");

//* Configure EBI Chip select	
//  pCCFG->CCFG_EBICSA |= AT91C_EBI_CS1A_SDRAMC;
//  AT91C_CCFG_EBICSA ((AT91_REG *) 	0xFFFFEF1C) // (CCFG)  EBI Chip Select Assignement Register
    __writeMemory32(0x02,0xFFFFFF80,"Memory");

//* psdrc->SDRC_CR =  AT91C_SDRAMC_NC_9  | AT91C_SDRAMC_NR_13 | AT91C_SDRAMC_CAS_2 |
//  AT91C_SDRAMC_NB_4_BANKS | AT91C_SDRAMC_TWR_2 | AT91C_SDRAMC_TRC_4 |
//  AT91C_SDRAMC_TRP_2 | AT91C_SDRAMC_TRCD_2 | AT91C_SDRAMC_TRAS_3 | AT91C_SDRAMC_TXSR_4 ;
    __writeMemory32(0x21922159,0xFFFFFFB8,"Memory");
    
    __delay(1);

//*	psdrc->SDRC_MR	= 0x00000011;		    // NOP CMD
    __writeMemory32(0x00000011,0xFFFFFFB0,"Memory");
//*	*AT91C_SDRAM	= 0x00000000;			
    __writeMemory32(0x00000000,0x20000000,"Memory");

//*	psdrc->SDRC_MR	= 0x00000012;			// Perform PRCHG
    __writeMemory32(0x00000012,0xFFFFFFB0,"Memory");
//*	*AT91C_SDRAM	= 0x00000000;
    __writeMemory32(0x00000000,0x20000000,"Memory");
    
//*	psdrc->SDRC_MR	= AT91C_SDRAMC_MODE_RFSH_CMD;		// Set 1st CBR
    __writeMemory32(0x0000014,0xFFFFFFB0,"Memory");
    __writeMemory32(0x00000000,0x20000000,"Memory");
//*	psdrc->SDRC_MR	= AT91C_SDRAMC_MODE_RFSH_CMD;		// Set 1st CBR
    __writeMemory32(0x0000014,0xFFFFFFB0,"Memory");
    __writeMemory32(0x00000000,0x20000000,"Memory");
//*	psdrc->SDRC_MR	= AT91C_SDRAMC_MODE_RFSH_CMD;		// Set 1st CBR
    __writeMemory32(0x0000014,0xFFFFFFB0,"Memory");
    __writeMemory32(0x00000000,0x20000000,"Memory");
//*	psdrc->SDRC_MR	= AT91C_SDRAMC_MODE_RFSH_CMD;		// Set 1st CBR
    __writeMemory32(0x0000014,0xFFFFFFB0,"Memory");
    __writeMemory32(0x00000000,0x20000000,"Memory");
//*	psdrc->SDRC_MR	= AT91C_SDRAMC_MODE_RFSH_CMD;		// Set 1st CBR
    __writeMemory32(0x0000014,0xFFFFFFB0,"Memory");
    __writeMemory32(0x00000000,0x20000000,"Memory");
//*	psdrc->SDRC_MR	= AT91C_SDRAMC_MODE_RFSH_CMD;		// Set 1st CBR
    __writeMemory32(0x0000014,0xFFFFFFB0,"Memory");
    __writeMemory32(0x00000000,0x20000000,"Memory");
//*	psdrc->SDRC_MR	= AT91C_SDRAMC_MODE_RFSH_CMD;		// Set 1st CBR
    __writeMemory32(0x0000014,0xFFFFFFB0,"Memory");
    __writeMemory32(0x00000000,0x20000000,"Memory");
//*	psdrc->SDRC_MR	= AT91C_SDRAMC_MODE_RFSH_CMD;		// Set 1st CBR
    __writeMemory32(0x0000014,0xFFFFFFB0,"Memory");
    __writeMemory32(0x00000000,0x20000000,"Memory");

//*	psdrc->SDRC_MR	= AT91C_SDRAMC_MODE_LMR_CMD;		// Set LMR operation
    __writeMemory32(0x00000013,0xFFFFFFB0,"Memory");
//*	*(AT91C_SDRAM+0x20)	= 0xcafedede;		// Perform LMR burst=1, lat=2
    __writeMemory32(0xCAFEDEDE,0x20000020,"Memory");

//*	psdrc->SDRC_MR	= AT91C_SDRAMC_MODE_NORMAL_CMD;		// Set Normal mode
    __writeMemory32(0x00000010,0xFFFFFFB0,"Memory");

//*	psdrc->SDRC_TR	= (AT91C_MASTER_CLOCK * 7)/1000000;				// Set Refresh Timer 390 for 25MHz (TR= 15.6 * F )
//									               // (F : system clock freq. MHz
    __writeMemory32(0x00000150,0xFFFFFFB4,"Memory");

//*	*AT91C_SDRAM	= 0x00000000;	// Perform Normal mode
    __writeMemory32(0x00000000,0x20000000,"Memory");

    __message "------------------------------- SDRAM Done at 48 MHz -------------------------------";
}


/*********************************************************************
*
*       _InitRSTC()
*
* Function description
*   Initializes the RSTC (Reset controller).
*   This makes sense since the default is to not allow user resets, which makes it impossible to
*   apply a second RESET via J-Link
*/
_InitRSTC() {
    __writeMemory32(0xA5000001, 0xFFFFFD08,"Memory");    // Allow user reset
}

/*********************************************************************
*
*       _InitPLL()
* Function description
*   Initializes the PMC.
*   1. Enable the Main Oscillator
*   2. Configure PLL to 96MHz
*   3. Switch Master Clock (MCK) on PLL/2 = 48MHz
*/
_InitPLL() {
    __message "Set Main Oscillator";
    __writeMemory32(0x00004001,0xFFFFFC20,"Memory");    // MOSC
    while( !(__readMemory32(0xFFFFFC68,"Memory") & 0x1)  );

    __message "Set PLL to 96MHz";
    __writeMemory32(0x1048100e,0xFFFFFC2C,"Memory");    // LOCK
    while( !(__readMemory32(0xFFFFFC68,"Memory") & 0x4)  );

    __message "Set Master Clock to 48MHz";
    __writeMemory32(0x00000004,0xFFFFFC30,"Memory");    // MCKRDY
    while( !(__readMemory32(0xFFFFFC68,"Memory") & 0x8)  );
    __writeMemory32(0x00000007,0xFFFFFC30,"Memory");    // MCKRDY
    while( !(__readMemory32(0xFFFFFC68,"Memory") & 0x8)  );
}

/*********************************************************************
*
*       execUserReset() : JTAG set initially to Full Speed
*/
execUserReset() {
    __message "execUserReset()";
    _InitPLL();                         // Allow to debug at JTAG Full Speed
    _MapRAMAt0();                       // Remap SRAM to address 0
}

/*********************************************************************
*
*       execUserPreload() : JTAG set initially to 32kHz
*/
execUserPreload() {
    __message "execUserPreload()";
    __hwReset(0);                       // Hardware Reset: CPU is automatically halted after the reset (JTAG is already configured to 32kHz)
    _InitPLL();                         // Allow to load Code at JTAG Full Speed
    __initSDRAM();                      // Init SDRAM before load
    _MapRAMAt0();                       // Remap SRAM to address 0
    _InitRSTC();                        // Enable User Reset to allow execUserReset() execution
}
