###############################################################################
#                                                                             #
#                                                       28/Feb/2012  20:28:08 #
# IAR ANSI C/C++ Compiler V6.30.6.33336/W32 KICKSTART for ARM                 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\main.c          #
#    Command line =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\main.c -D       #
#                    at91sam3u4 -D flash -D TRACE_LEVEL=4 -lC                 #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\List\ --remarks --diag_suppress Pe826,Pe1375 -o    #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\Obj\ --debug --endian=little --cpu=Cortex-M3 -e    #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0                           #
#                    Kickstart_2\arm\INC\c\DLib_Config_Full.h" -I             #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\..\..\..\at #
#                    91lib/peripherals\ -I C:\Users\Martin\Documents\AtmelAdv #
#                    entures\IAR\arm\examples\Atmel\at91sam3u-ek\basic-pwm2-p #
#                    roject\ewp\..\..\..\at91lib/components\ -I               #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\..\..\..\at #
#                    91lib\ -I C:\Users\Martin\Documents\AtmelAdventures\IAR\ #
#                    arm\examples\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\. #
#                    .\..\..\external_libs\ -I C:\Users\Martin\Documents\Atme #
#                    lAdventures\IAR\arm\examples\Atmel\at91sam3u-ek\basic-pw #
#                    m2-project\ewp\..\..\..\at91lib/boards/at91sam3u-ek\     #
#                    -Ohz --use_c++_inline                                    #
#    List file    =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\List\main.lst                                      #
#    Object file  =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\examples\Atmel\at91sam3u-ek\basic-pwm2-project\main.c
      1          /* ----------------------------------------------------------------------------
      2           *         ATMEL Microcontroller Software Support
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2008, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          //------------------------------------------------------------------------------
     31          /// \dir "Basic PWM2 Project"
     32          ///
     33          /// !!!Purpose
     34          ///
     35          /// This example demonstrates a simple configuration of three PWM channels to
     36          /// generate variable duty cycle signals. The update of the duty cycle values
     37          /// is made automatically by the Peripheral DMA Controller (PDC).
     38          /// This will cause one or more LEDs the evaluation kit to glow repeatedly.
     39          ///
     40          /// !!!See
     41          /// - pwmc: Pulse width modulation controller driver
     42          ///
     43          /// !!!Requirements
     44          ///
     45          /// This package can be used with all Atmel evaluation kits that have PWMC2
     46          /// interface.
     47          ///
     48          /// !!!Description
     49          ///
     50          /// Three PWM channels (channel #0, #1 and #3) are configured to generate
     51          /// a 50Hz PWM signal. The update of the duty cycle values is made
     52          /// automatically by the PDC.
     53          ///
     54          /// When launched, this program displays a menu on the DBGU, enabling the user
     55          /// to choose between several options:
     56          ///   - Set update period for syncronous channel
     57          ///   - Set dead time
     58          ///   - Set output override
     59          ///
     60          /// On most Atmel evaluation kits, PWM signals for channels #0 and #1 are connected
     61          /// to two LEDs on the board. Since the duty cycle of the PWM signals varies continuously,
     62          /// the two LEDs will alternate between their minimum and maximum intensity. Note that
     63          /// on some boards, only one LED will be connected.
     64          ///
     65          /// !!!Usage
     66          ///
     67          /// -# Build the program and download it inside the evaluation board. Please refer to the
     68          /// <a href="http://www.atmel.com/dyn/resources/prod_documents/doc6132.pdf">
     69          /// SAM-BA User Guide</a>, the
     70          /// <a href="http://www.atmel.com/dyn/resources/prod_documents/doc6132.pdf">
     71          /// GNU-Based Software Development</a> application note or to the
     72          /// <a href="http://www.atmel.com/dyn/resources/prod_documents/doc6132.pdf">
     73          /// IAR EWARM User Guide</a>, depending on your chosen solution.
     74          /// -# Optionally, on the computer, open the DBGU port with a terminal application
     75          ///    (e.g. HyperTerminal on Microsoft Windows) with these settings:
     76          ///   - 115200 bauds
     77          ///   - 8 bits of data
     78          ///   - No parity
     79          ///   - 1 stop bit
     80          ///   - No flow control
     81          /// -# Start the application.
     82          /// -# Depending on the board being used, either one or three LEDs will start glowing repeatedly.
     83          /// -# Select one or more options to set the configuration of PWM channel.
     84          ///
     85          //------------------------------------------------------------------------------
     86          
     87          //------------------------------------------------------------------------------
     88          /// \unit
     89          ///
     90          /// !Purpose
     91          ///
     92          /// This file contains all the specific code for the basic-pwm2-project
     93          ///
     94          /// !Contents
     95          /// The code can be roughly broken down as follows:
     96          ///    - Interrupt handler for the PWM controller
     97          ///    - The main function, which implements the program behavior
     98          ///
     99          /// Please refer to the list of functions in the #Overview# tab of this unit
    100          /// for more detailed information.
    101          //------------------------------------------------------------------------------
    102          
    103          //------------------------------------------------------------------------------
    104          //         Headers
    105          //------------------------------------------------------------------------------
    106          
    107          #include <board.h>
    108          #include <pio/pio.h>
    109          #include <irq/irq.h>
    110          #include <dbgu/dbgu.h>
    111          #include <pwmc/pwmc2.h>
    112          #include <utility/trace.h>
    113          
    114          #include <stdio.h>
    115          
    116          //------------------------------------------------------------------------------
    117          //         Local definitions
    118          //------------------------------------------------------------------------------
    119          
    120          /// PWM frequency in Hz.
    121          #define PWM_FREQUENCY               50
    122          
    123          /// Maximum duty cycle value.
    124          #define MAX_DUTY_CYCLE              50
    125          #define MIN_DUTY_CYCLE              0
    126          
    127          /// Duty cycle buffer length for three channels
    128          #define DUTY_BUFFER_LENGTH          (MAX_DUTY_CYCLE - MIN_DUTY_CYCLE + 1) * 3
    129          
    130          //------------------------------------------------------------------------------
    131          //         Local variables
    132          //------------------------------------------------------------------------------
    133          
    134          /// Pio pins to configure.

   \                                 In section .rodata, align 4
   \                     `?<Constant {{6144, (AT91S_PIO *)1074662400, 10`:
   \   00000000   0x00001800         DC32 6144, 400E0C00H
   \              0x400E0C00   
   \   00000008   0x0A 0x00          DC8 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000001B   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
   \   00000020   0x2D 0x2D          DC8 "-- Basic PWMC2 Project %s --\012\015"
   \              0x20 0x42    
   \              0x61 0x73    
   \              0x69 0x63    
   \              0x20 0x50    
   \              0x57 0x4D    
   \              0x43 0x32    
   \              0x20 0x50    
   \              0x72 0x6F    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x2D 0x2D    
   \              0x0A 0x0D    
   \              0x00         
   \   0000003F   0x00               DC8 0
   \   00000040   0x31 0x2E          DC8 "1.7-rc1"
   \              0x37 0x2D    
   \              0x72 0x63    
   \              0x31 0x00    
   \   00000048   0x2D 0x2D          DC8 "-- %s\012\015"
   \              0x20 0x25    
   \              0x73 0x0A    
   \              0x0D 0x00    
   \   00000050   0x41 0x54          DC8 "AT91SAM3U-EK"
   \              0x39 0x31    
   \              0x53 0x41    
   \              0x4D 0x33    
   \              0x55 0x2D    
   \              0x45 0x4B    
   \              0x00         
   \   0000005D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \   00000060   0x2D 0x2D          DC8 "-- Compiled: %s %s --\012\015"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x70 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x25 0x73    
   \              0x20 0x2D    
   \              0x2D 0x0A    
   \              0x0D 0x00    
   \   00000078   0x46 0x65          DC8 "Feb 28 2012"
   \              0x62 0x20    
   \              0x32 0x38    
   \              0x20 0x32    
   \              0x30 0x31    
   \              0x32 0x00    
   \   00000084   0x32 0x30          DC8 "20:28:07"
   \              0x3A 0x32    
   \              0x38 0x3A    
   \              0x30 0x37    
   \              0x00         
   \   0000008D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \   00000090   0x49 0x6E          DC8 "Input update period between %d to %d.\012\015"
   \              0x70 0x75    
   \              0x74 0x20    
   \              0x75 0x70    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x20 0x70    
   \              0x65 0x72    
   \              0x69 0x6F    
   \              0x64 0x20    
   \              0x62 0x65    
   \              0x74 0x77    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x25 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x25 0x64    
   \              0x2E 0x0A    
   \              0x0D 0x00    
   \   000000B8   0x44 0x6F          DC8 "Done\012\015"
   \              0x6E 0x65    
   \              0x0A 0x0D    
   \              0x00         
   \   000000BF   0x00               DC8 0
   \   000000C0   0x49 0x6E          DC8 "Invalid input\012\015"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x69 0x6E    
   \              0x70 0x75    
   \              0x74 0x0A    
   \              0x0D 0x00    
   \   000000D0   0x49 0x6E          DC8 "Input dead time between %d to %d.\012\015"
   \              0x70 0x75    
   \              0x74 0x20    
   \              0x64 0x65    
   \              0x61 0x64    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x20    
   \              0x62 0x65    
   \              0x74 0x77    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x25 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x25 0x64    
   \              0x2E 0x0A    
   \              0x0D 0x00    
   \   000000F4   0x30 0x3A          DC8 "0: Disable override output on channel #0\012\015"
   \              0x20 0x44    
   \              0x69 0x73    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x6F    
   \              0x76 0x65    
   \              0x72 0x72    
   \              0x69 0x64    
   \              0x65 0x20    
   \              0x6F 0x75    
   \              0x74 0x70    
   \              0x75 0x74    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x6C 0x20    
   \              0x23 0x30    
   \              0x0A 0x0D    
   \              0x00         
   \   0000011F   0x00               DC8 0
   \   00000120   0x31 0x3A          DC8 "1: Enable override output on channel #0\012\015"
   \              0x20 0x45    
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x72 0x69    
   \              0x64 0x65    
   \              0x20 0x6F    
   \              0x75 0x74    
   \              0x70 0x75    
   \              0x74 0x20    
   \              0x6F 0x6E    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6E 0x6E    
   \              0x65 0x6C    
   \              0x20 0x23    
   \              0x30 0x0A    
   \              0x0D 0x00    
   \   0000014A   0x00 0x00          DC8 0, 0
   \   0000014C   0x00001800         DC32 6144, 400E0C00H
   \              0x400E0C00   
   \   00000154   0x0A 0x00          DC8 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000167   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
   \   0000016C   0x00000001         DC32 1, 400E0E00H
   \              0x400E0E00   
   \   00000174   0x0B 0x00          DC8 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000187   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
   \   0000018C   0x00000002         DC32 2, 400E0E00H
   \              0x400E0E00   
   \   00000194   0x0B 0x00          DC8 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001A7   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
   \   000001AC   0x00000004         DC32 4, 400E0E00H
   \              0x400E0E00   
   \   000001B4   0x0B 0x00          DC8 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001C7   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
   \   000001CC   0x00000080         DC32 128, 400E0C00H
   \              0x400E0C00   
   \   000001D4   0x0A 0x01          DC8 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001E7   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
   \   000001EC   0x00000100         DC32 256, 400E0C00H
   \              0x400E0C00   
   \   000001F4   0x0A 0x01          DC8 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000207   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
   \   0000020C   0x00000200         DC32 512, 400E0C00H
   \              0x400E0C00   
   \   00000214   0x0A 0x01          DC8 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000227   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
    135          static const Pin pins[] = {
    136              PINS_DBGU,
    137              PIN_PWM_LED0,
    138              PIN_PWM_LED1,
    139              PIN_PWM_LED2,
    140              PIN_PWMC_PWML0,
    141              PIN_PWMC_PWML1,
    142              PIN_PWMC_PWML2
    143          };
    144          
    145          /// duty cycle buffer for PDC transfer

   \                                 In section .bss, align 4
    146          unsigned short dutyBuffer[DUTY_BUFFER_LENGTH];
   \                     dutyBuffer:
   \   00000000                      DS8 308
    147          
    148          //------------------------------------------------------------------------------
    149          //         Local functions
    150          //------------------------------------------------------------------------------
    151          
    152          //------------------------------------------------------------------------------
    153          /// Wait time in ms
    154          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    155          void UTIL_Loop(unsigned int loop)
    156          {
    157              while(loop--);	
   \                     UTIL_Loop:
   \                     ??UTIL_Loop_0:
   \   00000000   0x4601             MOV      R1,R0
   \   00000002   0x1E48             SUBS     R0,R1,#+1
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD1FB             BNE.N    ??UTIL_Loop_0
    158          }
   \   00000008   0x4770             BX       LR               ;; return
    159          
    160          

   \                                 In section .text, align 2, keep-with-next
    161          void UTIL_WaitTimeInMs(unsigned int mck, unsigned int time_ms)
    162          {
    163              register unsigned int i = 0;
    164              i = (mck / 1000) * time_ms;
    165              i = i / 3;
    166              UTIL_Loop(i);
   \                     UTIL_WaitTimeInMs:
   \   00000000   0xF44F 0x727A      MOV      R2,#+1000
   \   00000004   0xFBB0 0xF0F2      UDIV     R0,R0,R2
   \   00000008   0x4348             MULS     R0,R1,R0
   \   0000000A   0x2103             MOVS     R1,#+3
   \   0000000C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000010   0x....             B.N      UTIL_Loop
    167          }
    168          
    169          //------------------------------------------------------------------------------
    170          /// Wait time in us
    171          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    172          void UTIL_WaitTimeInUs(unsigned int mck, unsigned int time_us)
    173          {
   \                     UTIL_WaitTimeInUs:
   \   00000000   0xB082             SUB      SP,SP,#+8
    174              volatile unsigned int i = 0;
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x9200             STR      R2,[SP, #+0]
    175              i = (mck / 1000000) * time_us;
   \   00000006   0x....             LDR.N    R2,??DataTable4_2  ;; 0xf4240
   \   00000008   0xFBB0 0xF0F2      UDIV     R0,R0,R2
   \   0000000C   0x4348             MULS     R0,R1,R0
   \   0000000E   0x9000             STR      R0,[SP, #+0]
    176              i = i / 3;
   \   00000010   0x9800             LDR      R0,[SP, #+0]
   \   00000012   0x2103             MOVS     R1,#+3
   \   00000014   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000018   0x9000             STR      R0,[SP, #+0]
    177              UTIL_Loop(i);
   \   0000001A   0x9800             LDR      R0,[SP, #+0]
   \   0000001C   0xB002             ADD      SP,SP,#+8
   \   0000001E   0x....             B.N      UTIL_Loop
    178          }
    179          
    180          //------------------------------------------------------------------------------
    181          /// Interrupt handler for the PWM controller.
    182          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    183          void PWM_IrqHandler(void)
    184          {
    185              unsigned int isr2 = AT91C_BASE_PWMC->PWMC_ISR2;
   \                     PWM_IrqHandler:
   \   00000000   0x....             LDR.N    R0,??DataTable4_3  ;; 0x4008c000
   \   00000002   0x6C01             LDR      R1,[R0, #+64]
    186          
    187              if ((isr2 & AT91C_PWMC_ENDTX) == AT91C_PWMC_ENDTX) {
   \   00000004   0x0789             LSLS     R1,R1,#+30
   \   00000006   0xD503             BPL.N    ??PWM_IrqHandler_0
    188          
    189                  PWMC_WriteBuffer(AT91C_BASE_PWMC, dutyBuffer, DUTY_BUFFER_LENGTH);
   \   00000008   0x2299             MOVS     R2,#+153
   \   0000000A   0x....             LDR.N    R1,??DataTable4_4
   \   0000000C   0x.... 0x....      B.W      PWMC_WriteBuffer
    190              }
    191          }
   \                     ??PWM_IrqHandler_0:
   \   00000010   0x4770             BX       LR               ;; return
    192          
    193          //------------------------------------------------------------------------------
    194          //         Global functions
    195          //------------------------------------------------------------------------------
    196          
    197          //-----------------------------------------------------------------------------
    198          /// Display menu
    199          //-----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    200          void DisplayMenu(void)
    201          {
   \                     DisplayMenu:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    202              printf("\n\r");
   \   00000002   0x....             ADR.N    R4,??DataTable4  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x.... 0x....      BL       printf
    203              printf("===============================================================\n\r");
   \   0000000A   0x....             LDR.N    R5,??DataTable4_5
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x.... 0x....      BL       printf
    204              printf("Menu: press a key to change the configuration.\n\r");
   \   00000012   0xF105 0x0044      ADD      R0,R5,#+68
   \   00000016   0x.... 0x....      BL       printf
    205              printf("===============================================================\n\r");
   \   0000001A   0x4628             MOV      R0,R5
   \   0000001C   0x.... 0x....      BL       printf
    206              printf("  u : Set update period for syncronous channel \n\r");
   \   00000020   0xF105 0x0078      ADD      R0,R5,#+120
   \   00000024   0x.... 0x....      BL       printf
    207              printf("  d : Set dead time\n\r");
   \   00000028   0xF105 0x00AC      ADD      R0,R5,#+172
   \   0000002C   0x.... 0x....      BL       printf
    208              printf("  o : Set output override\n\r");
   \   00000030   0xF105 0x00C4      ADD      R0,R5,#+196
   \   00000034   0x.... 0x....      BL       printf
    209              printf("\n\r");
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000003E   0x.... 0x....      B.W      printf
    210          }
    211          
    212          //-----------------------------------------------------------------------------
    213          /// Get 2 digit numkey
    214          /// \return numkey value
    215          //-----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    216          unsigned int GetNumkey2Digit(void)
    217          {
   \                     GetNumkey2Digit:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    218              unsigned int numkey;
    219              unsigned char key1, key2;
    220          
    221              printf("\n\rEnter 2 digits : ");
   \   00000002   0x....             LDR.N    R0,??DataTable4_6
   \   00000004   0x.... 0x....      BL       printf
    222              key1 = DBGU_GetChar();
   \   00000008   0x.... 0x....      BL       DBGU_GetChar
   \   0000000C   0x4604             MOV      R4,R0
    223              printf("%c", key1);
   \   0000000E   0x....             ADR.N    R5,??DataTable4_1  ;; 0x25, 0x63, 0x00, 0x00
   \   00000010   0x4621             MOV      R1,R4
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       printf
    224              key2 = DBGU_GetChar();
   \   00000018   0x.... 0x....      BL       DBGU_GetChar
   \   0000001C   0x4606             MOV      R6,R0
    225              printf("%c", key2);
   \   0000001E   0x4631             MOV      R1,R6
   \   00000020   0x4628             MOV      R0,R5
   \   00000022   0x.... 0x....      BL       printf
    226              printf("\n\r");
   \   00000026   0x....             ADR.N    R0,??DataTable4  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000028   0x.... 0x....      BL       printf
    227          
    228              numkey = (key1 - '0')*10 + (key2 - '0');
    229          
    230              return numkey;
   \   0000002C   0x200A             MOVS     R0,#+10
   \   0000002E   0xFB00 0x6004      MLA      R0,R0,R4,R6
   \   00000032   0xF5A0 0x7004      SUB      R0,R0,#+528
   \   00000036   0xBD70             POP      {R4-R6,PC}       ;; return
    231          }
    232          
    233          //------------------------------------------------------------------------------
    234          /// Outputs a PWM on LED1 & LED2 & LED3 to makes it fade in repeatedly.
    235          /// Channel #0, #1, #2 are linked together as synchronous channels, so they have
    236          /// the same source clock, the same period, the same alignment and
    237          /// are started together. The update of the duty cycle values is made
    238          /// automatically by the Peripheral DMA Controller (PDC).
    239          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    240          int main(void)
    241          {
   \                     main:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
    242              unsigned int i;
    243              unsigned char key;
    244              unsigned int numkey;
    245          
    246              PIO_Configure(pins, PIO_LISTSIZE(pins));
   \   00000004   0x....             LDR.N    R4,??DataTable4_7
   \   00000006   0x2107             MOVS     R1,#+7
   \   00000008   0xF204 0x104C      ADDW     R0,R4,#+332
   \   0000000C   0x.... 0x....      BL       PIO_Configure
    247              TRACE_CONFIGURE(DBGU_STANDARD, 115200, BOARD_MCK);
   \   00000010   0xA804             ADD      R0,SP,#+16
   \   00000012   0x4621             MOV      R1,R4
   \   00000014   0x2220             MOVS     R2,#+32
   \   00000016   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0xA804             ADD      R0,SP,#+16
   \   0000001E   0x.... 0x....      BL       PIO_Configure
   \   00000022   0x....             LDR.N    R5,??DataTable4_8  ;; 0x2dc6c00
   \   00000024   0x462A             MOV      R2,R5
   \   00000026   0xF44F 0x31E1      MOV      R1,#+115200
   \   0000002A   0xF44F 0x6000      MOV      R0,#+2048
   \   0000002E   0x.... 0x....      BL       DBGU_Configure
    248              printf("-- Basic PWMC2 Project %s --\n\r", SOFTPACK_VERSION);
   \   00000032   0xF104 0x0140      ADD      R1,R4,#+64
   \   00000036   0xF104 0x0020      ADD      R0,R4,#+32
   \   0000003A   0x.... 0x....      BL       printf
    249              printf("-- %s\n\r", BOARD_NAME);
   \   0000003E   0xF104 0x0150      ADD      R1,R4,#+80
   \   00000042   0xF104 0x0048      ADD      R0,R4,#+72
   \   00000046   0x.... 0x....      BL       printf
    250              printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
   \   0000004A   0xF104 0x0284      ADD      R2,R4,#+132
   \   0000004E   0xF104 0x0178      ADD      R1,R4,#+120
   \   00000052   0xF104 0x0060      ADD      R0,R4,#+96
   \   00000056   0x.... 0x....      BL       printf
    251          
    252              UTIL_WaitTimeInMs(BOARD_MCK, 1000);
   \   0000005A   0xF44F 0x717A      MOV      R1,#+1000
   \   0000005E   0x4628             MOV      R0,R5
   \   00000060   0x.... 0x....      BL       UTIL_WaitTimeInMs
    253              UTIL_WaitTimeInUs(BOARD_MCK, 1000);
   \   00000064   0xF44F 0x717A      MOV      R1,#+1000
   \   00000068   0x4628             MOV      R0,R5
   \   0000006A   0x.... 0x....      BL       UTIL_WaitTimeInUs
    254          
    255              // Enable PWMC peripheral clock
    256              AT91C_BASE_PMC->PMC_PCER = 1 << AT91C_ID_PWMC;
   \   0000006E   0x....             LDR.N    R0,??DataTable4_9  ;; 0x400e0410
   \   00000070   0xF04F 0x7100      MOV      R1,#+33554432
   \   00000074   0x6001             STR      R1,[R0, #+0]
    257          
    258              // Set clock A to run at PWM_FREQUENCY * MAX_DUTY_CYCLE (clock B is not used)
    259              PWMC_ConfigureClocks(PWM_FREQUENCY * MAX_DUTY_CYCLE, 0, BOARD_MCK);
   \   00000076   0x462A             MOV      R2,R5
   \   00000078   0x2100             MOVS     R1,#+0
   \   0000007A   0xF640 0x10C4      MOVW     R0,#+2500
   \   0000007E   0x.... 0x....      BL       PWMC_ConfigureClocks
    260          
    261              // Configure PWMC channel for LED0 (left-aligned, enable dead time generator)
    262              PWMC_ConfigureChannelExt(CHANNEL_PWM_LED0, AT91C_PWMC_CPRE_MCKA, 0, 0,
    263                                       0, AT91C_PWMC_DTE, 0, 0);
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x9003             STR      R0,[SP, #+12]
   \   00000086   0x9002             STR      R0,[SP, #+8]
   \   00000088   0xF44F 0x3080      MOV      R0,#+65536
   \   0000008C   0x9001             STR      R0,[SP, #+4]
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x9000             STR      R0,[SP, #+0]
   \   00000092   0x2300             MOVS     R3,#+0
   \   00000094   0x4602             MOV      R2,R0
   \   00000096   0x210B             MOVS     R1,#+11
   \   00000098   0x.... 0x....      BL       PWMC_ConfigureChannelExt
    264              PWMC_SetPeriod(CHANNEL_PWM_LED0, MAX_DUTY_CYCLE);
   \   0000009C   0x2132             MOVS     R1,#+50
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x.... 0x....      BL       PWMC_SetPeriod
    265              PWMC_SetDutyCycle(CHANNEL_PWM_LED0, MIN_DUTY_CYCLE);
   \   000000A4   0x2100             MOVS     R1,#+0
   \   000000A6   0x4608             MOV      R0,R1
   \   000000A8   0x.... 0x....      BL       PWMC_SetDutyCycle
    266              PWMC_SetDeadTime(CHANNEL_PWM_LED0, 5, 5);
   \   000000AC   0x2205             MOVS     R2,#+5
   \   000000AE   0x4611             MOV      R1,R2
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x.... 0x....      BL       PWMC_SetDeadTime
    267          
    268              // Configure PWMC channel for LED1
    269              PWMC_ConfigureChannelExt(CHANNEL_PWM_LED1, AT91C_PWMC_CPRE_MCKA, 0, 0,
    270                                       0, 0, 0, 0);
   \   000000B6   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0x.... 0x....      BL       PWMC_ConfigureChannelExt
    271              PWMC_SetPeriod(CHANNEL_PWM_LED1, MAX_DUTY_CYCLE);
   \   000000C0   0x2132             MOVS     R1,#+50
   \   000000C2   0x2001             MOVS     R0,#+1
   \   000000C4   0x.... 0x....      BL       PWMC_SetPeriod
    272              PWMC_SetDutyCycle(CHANNEL_PWM_LED1, MIN_DUTY_CYCLE);
   \   000000C8   0x2100             MOVS     R1,#+0
   \   000000CA   0x2001             MOVS     R0,#+1
   \   000000CC   0x.... 0x....      BL       PWMC_SetDutyCycle
    273          
    274              // Configure PWMC channel for LED2
    275              PWMC_ConfigureChannelExt(CHANNEL_PWM_LED2, AT91C_PWMC_CPRE_MCKA, 0, 0,
    276                                       0, 0, 0, 0);
   \   000000D0   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   000000D4   0x2002             MOVS     R0,#+2
   \   000000D6   0x.... 0x....      BL       PWMC_ConfigureChannelExt
    277              PWMC_SetPeriod(CHANNEL_PWM_LED2, MAX_DUTY_CYCLE);
   \   000000DA   0x2132             MOVS     R1,#+50
   \   000000DC   0x2002             MOVS     R0,#+2
   \   000000DE   0x.... 0x....      BL       PWMC_SetPeriod
    278              PWMC_SetDutyCycle(CHANNEL_PWM_LED2, MIN_DUTY_CYCLE);
   \   000000E2   0x2100             MOVS     R1,#+0
   \   000000E4   0x2002             MOVS     R0,#+2
   \   000000E6   0x.... 0x....      BL       PWMC_SetDutyCycle
    279          
    280              // Set channel #0, #1 and #2 as synchronous channels, update mode = 2
    281              PWMC_ConfigureSyncChannel(AT91C_PWMC_SYNC0 | AT91C_PWMC_SYNC1 | AT91C_PWMC_SYNC2,
    282                  AT91C_PWMC_UPDM_MODE2, 0, 0);
   \   000000EA   0x2300             MOVS     R3,#+0
   \   000000EC   0x461A             MOV      R2,R3
   \   000000EE   0xF44F 0x3100      MOV      R1,#+131072
   \   000000F2   0x2007             MOVS     R0,#+7
   \   000000F4   0x.... 0x....      BL       PWMC_ConfigureSyncChannel
    283          
    284              // Set Synchronous channel update period value
    285              PWMC_SetSyncChannelUpdatePeriod(AT91C_PWMC_UPVUPDAL);
   \   000000F8   0x200F             MOVS     R0,#+15
   \   000000FA   0x.... 0x....      BL       PWMC_SetSyncChannelUpdatePeriod
    286          
    287              // Configure interrupt for PDC transfer
    288              IRQ_ConfigureIT(AT91C_ID_PWMC, 0, PWM_IrqHandler);
   \   000000FE   0x....             LDR.N    R2,??DataTable4_10
   \   00000100   0x2100             MOVS     R1,#+0
   \   00000102   0x2019             MOVS     R0,#+25
   \   00000104   0x.... 0x....      BL       IRQ_ConfigureIT
    289              IRQ_EnableIT(AT91C_ID_PWMC);
   \   00000108   0x2019             MOVS     R0,#+25
   \   0000010A   0x.... 0x....      BL       IRQ_EnableIT
    290              PWMC_EnableIt(0, AT91C_PWMC_ENDTX);
   \   0000010E   0x2102             MOVS     R1,#+2
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0x.... 0x....      BL       PWMC_EnableIt
    291          
    292              // Enable syncronous channels by enable channel #0
    293              PWMC_EnableChannel(CHANNEL_PWM_LED0);
   \   00000116   0x2000             MOVS     R0,#+0
   \   00000118   0x.... 0x....      BL       PWMC_EnableChannel
    294          
    295              // Set override value to 1 on PWMH0, others is 0.
    296              PWMC_SetOverrideValue(AT91C_PWMC_OOVH0);
   \   0000011C   0x2001             MOVS     R0,#+1
   \   0000011E   0x.... 0x....      BL       PWMC_SetOverrideValue
    297          
    298              // Fill duty cycle buffer for channel #1, #2 and #3
    299              // For Channel #1, #2, duty cycle from MIN_DUTY_CYCLE to MAX_DUTY_CYCLE
    300              // For Channel #3, duty cycle from MAX_DUTY_CYCLE to MIN_DUTY_CYCLE
    301              for (i = 0; i < DUTY_BUFFER_LENGTH/3; i++) {
   \   00000122   0x2000             MOVS     R0,#+0
   \   00000124   0x....             LDR.N    R1,??DataTable4_4
    302                  dutyBuffer[i*3] = (i + MIN_DUTY_CYCLE);
   \                     ??main_0:
   \   00000126   0x2206             MOVS     R2,#+6
   \   00000128   0xFB02 0x1200      MLA      R2,R2,R0,R1
   \   0000012C   0x8010             STRH     R0,[R2, #+0]
   \   0000012E   0xEB00 0x0240      ADD      R2,R0,R0, LSL #+1
   \   00000132   0xEB01 0x0242      ADD      R2,R1,R2, LSL #+1
   \   00000136   0x8050             STRH     R0,[R2, #+2]
    303                  dutyBuffer[i*3+1] = (i + MIN_DUTY_CYCLE);
    304                  dutyBuffer[i*3+2] = (MAX_DUTY_CYCLE - i);
   \   00000138   0xF1C0 0x0332      RSB      R3,R0,#+50
   \   0000013C   0x8093             STRH     R3,[R2, #+4]
    305              }
   \   0000013E   0x1C40             ADDS     R0,R0,#+1
   \   00000140   0x2833             CMP      R0,#+51
   \   00000142   0xD3F0             BCC.N    ??main_0
    306              // Start PDC transfer
    307              PWMC_WriteBuffer(AT91C_BASE_PWMC, dutyBuffer, DUTY_BUFFER_LENGTH);
   \   00000144   0x2299             MOVS     R2,#+153
   \   00000146   0x....             LDR.N    R0,??DataTable4_3  ;; 0x4008c000
   \   00000148   0x.... 0x....      BL       PWMC_WriteBuffer
   \   0000014C   0xF204 0x05C0      ADDW     R5,R4,#+192
   \   00000150   0xF204 0x06B8      ADDW     R6,R4,#+184
   \   00000154   0xE002             B.N      ??main_1
    308          
    309              while (1) {
    310                  DisplayMenu();
    311                  key = DBGU_GetChar();
    312          
    313                  switch (key) {
    314                      case 'u':
    315                          printf("Input update period between %d to %d.\n\r",
    316                              0, AT91C_PWMC_UPVUPDAL);
    317                          numkey = GetNumkey2Digit();
    318                          if(numkey <= AT91C_PWMC_UPVUPDAL) {
    319          
    320                              // Set synchronous channel update period value
    321                              PWMC_SetSyncChannelUpdatePeriod(numkey);
    322                              printf("Done\n\r");
    323                          } else {
    324          
    325                              printf("Invalid input\n\r");
    326                          }
    327                          break;
    328                      case 'd':
    329                          printf("Input dead time between %d to %d.\n\r",
    330                              MIN_DUTY_CYCLE, MAX_DUTY_CYCLE);
    331                          numkey = GetNumkey2Digit();
    332                          if(numkey >= MIN_DUTY_CYCLE && numkey <= MAX_DUTY_CYCLE) {
                                           ^
Warning[Pe186]: pointless comparison of unsigned integer with zero
    333          
    334                              // Set synchronous channel update period value
    335                              PWMC_SetDeadTime(CHANNEL_PWM_LED0, numkey, numkey);
    336                              // Update synchronous channel
    337                              PWMC_SetSyncChannelUpdateUnlock();
    338                              printf("Done\n\r");
    339                          } else {
    340          
    341                              printf("Invalid input\n\r");
    342                          }
    343                          break;
    344                      case 'o':
    345                          printf("0: Disable override output on channel #0\n\r");
    346                          printf("1: Enable override output on channel #0\n\r");
    347                          key = DBGU_GetChar();
    348          
    349                          if (key == '1') {
    350          
    351                              PWMC_EnableOverrideOutput(AT91C_PWMC_OSSUPDH0 | AT91C_PWMC_OSSUPDL0, 1);
    352                              printf("Done\n\r");
    353                          } else if (key == '0') {
    354          
    355                              PWMC_DisableOverrideOutput(AT91C_PWMC_OSSUPDH0 | AT91C_PWMC_OSSUPDL0, 1);
    356                              printf("Done\n\r");
    357                          }
    358                          break;
    359                      default:
    360                          printf("Invalid input\n\r");
   \                     ??main_2:
   \   00000156   0x4628             MOV      R0,R5
   \                     ??main_3:
   \   00000158   0x.... 0x....      BL       printf
    361                          break;
   \                     ??main_1:
   \   0000015C   0x.... 0x....      BL       DisplayMenu
   \   00000160   0x.... 0x....      BL       DBGU_GetChar
   \   00000164   0x2864             CMP      R0,#+100
   \   00000166   0xD012             BEQ.N    ??main_4
   \   00000168   0x286F             CMP      R0,#+111
   \   0000016A   0xD022             BEQ.N    ??main_5
   \   0000016C   0x2875             CMP      R0,#+117
   \   0000016E   0xD1F2             BNE.N    ??main_2
   \   00000170   0x220F             MOVS     R2,#+15
   \   00000172   0x2100             MOVS     R1,#+0
   \   00000174   0xF104 0x0090      ADD      R0,R4,#+144
   \   00000178   0x.... 0x....      BL       printf
   \   0000017C   0x.... 0x....      BL       GetNumkey2Digit
   \   00000180   0x2810             CMP      R0,#+16
   \   00000182   0xD2E8             BCS.N    ??main_2
   \   00000184   0xB2C0             UXTB     R0,R0
   \   00000186   0x.... 0x....      BL       PWMC_SetSyncChannelUpdatePeriod
   \                     ??main_6:
   \   0000018A   0x4630             MOV      R0,R6
   \   0000018C   0xE7E4             B.N      ??main_3
   \                     ??main_4:
   \   0000018E   0x2232             MOVS     R2,#+50
   \   00000190   0x2100             MOVS     R1,#+0
   \   00000192   0xF104 0x00D0      ADD      R0,R4,#+208
   \   00000196   0x.... 0x....      BL       printf
   \   0000019A   0x.... 0x....      BL       GetNumkey2Digit
   \   0000019E   0x2833             CMP      R0,#+51
   \   000001A0   0xD2D9             BCS.N    ??main_2
   \   000001A2   0xB282             UXTH     R2,R0
   \   000001A4   0xB281             UXTH     R1,R0
   \   000001A6   0x2000             MOVS     R0,#+0
   \   000001A8   0x.... 0x....      BL       PWMC_SetDeadTime
   \   000001AC   0x.... 0x....      BL       PWMC_SetSyncChannelUpdateUnlock
   \   000001B0   0xE7EB             B.N      ??main_6
   \                     ??main_5:
   \   000001B2   0xF104 0x00F4      ADD      R0,R4,#+244
   \   000001B6   0x.... 0x....      BL       printf
   \   000001BA   0xF204 0x1020      ADDW     R0,R4,#+288
   \   000001BE   0x.... 0x....      BL       printf
   \   000001C2   0x.... 0x....      BL       DBGU_GetChar
   \   000001C6   0x2831             CMP      R0,#+49
   \   000001C8   0xD105             BNE.N    ??main_7
   \   000001CA   0x2101             MOVS     R1,#+1
   \   000001CC   0xF04F 0x1001      MOV      R0,#+65537
   \   000001D0   0x.... 0x....      BL       PWMC_EnableOverrideOutput
   \   000001D4   0xE7D9             B.N      ??main_6
   \                     ??main_7:
   \   000001D6   0x2830             CMP      R0,#+48
   \   000001D8   0xD1C0             BNE.N    ??main_1
   \   000001DA   0x2101             MOVS     R1,#+1
   \   000001DC   0xF04F 0x1001      MOV      R0,#+65537
   \   000001E0   0x.... 0x....      BL       PWMC_DisableOverrideOutput
   \   000001E4   0xE7D1             B.N      ??main_6
    362                  }
    363              }
    364          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x9003             STR      R0,[SP, #+12]
   \   00000004   0x9002             STR      R0,[SP, #+8]
   \   00000006   0x9001             STR      R0,[SP, #+4]
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x4603             MOV      R3,R0
   \   0000000C   0x4602             MOV      R2,R0
   \   0000000E   0x210B             MOVS     R1,#+11
   \   00000010   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x25 0x63          DC8      0x25, 0x63, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x4008C000         DC32     0x4008c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     dutyBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     `?<Constant "=====================...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     `?<Constant "\\n\\rEnter 2 digits : ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     `?<Constant {{6144, (AT91S_PIO *)1074662400, 10`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x02DC6C00         DC32     0x2dc6c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x400E0410         DC32     0x400e0410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     PWM_IrqHandler

   \                                 In section .rodata, align 4
   \   00000000   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "=====================...">`:
   \   00000000   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000008   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000010   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000018   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000020   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000028   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000030   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000038   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 0AH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x0A    
   \   00000040   0x0D 0x00          DC8 0DH, 0
   \   00000042   0x00 0x00          DC8 0, 0
   \   00000044   0x4D 0x65          DC8 "Menu: press a key to change the configuration.\012\015"
   \              0x6E 0x75    
   \              0x3A 0x20    
   \              0x70 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x61 0x20    
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x74 0x6F    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x63 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x75 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x2E    
   \              0x0A 0x0D    
   \              0x00         
   \   00000075   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \   00000078   0x20 0x20          DC8 "  u : Set update period for syncronous channel \012\015"
   \              0x75 0x20    
   \              0x3A 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x75 0x70    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x20 0x70    
   \              0x65 0x72    
   \              0x69 0x6F    
   \              0x64 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x73 0x79    
   \              0x6E 0x63    
   \              0x72 0x6F    
   \              0x6E 0x6F    
   \              0x75 0x73    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6E 0x6E    
   \              0x65 0x6C    
   \              0x20 0x0A    
   \              0x0D 0x00    
   \   000000AA   0x00 0x00          DC8 0, 0
   \   000000AC   0x20 0x20          DC8 "  d : Set dead time\012\015"
   \              0x64 0x20    
   \              0x3A 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x64 0x65    
   \              0x61 0x64    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x0A    
   \              0x0D 0x00    
   \   000000C2   0x00 0x00          DC8 0, 0
   \   000000C4   0x20 0x20          DC8 "  o : Set output override\012\015"
   \              0x6F 0x20    
   \              0x3A 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x6F 0x75    
   \              0x74 0x70    
   \              0x75 0x74    
   \              0x20 0x6F    
   \              0x76 0x65    
   \              0x72 0x72    
   \              0x69 0x64    
   \              0x65 0x0A    
   \              0x0D 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\rEnter 2 digits : ">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015Enter 2 digits : "
   \              0x45 0x6E    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x32 0x20    
   \              0x64 0x69    
   \              0x67 0x69    
   \              0x74 0x73    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x63          DC8 "%c"
   \              0x00         
   \   00000003   0x00               DC8 0
    365          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  DisplayMenu
              0 -> printf
             16 -> printf
       16  GetNumkey2Digit
             16 -> DBGU_GetChar
             16 -> printf
        0  PWM_IrqHandler
              0 -> PWMC_WriteBuffer
        0  UTIL_Loop
        0  UTIL_WaitTimeInMs
              0 -> UTIL_Loop
        8  UTIL_WaitTimeInUs
              0 -> UTIL_Loop
       64  main
             64 -> DBGU_Configure
             64 -> DBGU_GetChar
             64 -> DisplayMenu
             64 -> GetNumkey2Digit
             64 -> IRQ_ConfigureIT
             64 -> IRQ_EnableIT
             64 -> PIO_Configure
             64 -> PWMC_ConfigureChannelExt
             64 -> PWMC_ConfigureClocks
             64 -> PWMC_ConfigureSyncChannel
             64 -> PWMC_DisableOverrideOutput
             64 -> PWMC_EnableChannel
             64 -> PWMC_EnableIt
             64 -> PWMC_EnableOverrideOutput
             64 -> PWMC_SetDeadTime
             64 -> PWMC_SetDutyCycle
             64 -> PWMC_SetOverrideValue
             64 -> PWMC_SetPeriod
             64 -> PWMC_SetSyncChannelUpdatePeriod
             64 -> PWMC_SetSyncChannelUpdateUnlock
             64 -> PWMC_WriteBuffer
             64 -> UTIL_WaitTimeInMs
             64 -> UTIL_WaitTimeInUs
             64 -> __aeabi_memcpy4
             64 -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "%c">
     224  ?<Constant "=====================...">
       4  ?<Constant "\n\r">
      20  ?<Constant "\n\rEnter 2 digits : ">
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      18  ?Subroutine0
      66  DisplayMenu
      56  GetNumkey2Digit
      18  PWM_IrqHandler
      10  UTIL_Loop
      18  UTIL_WaitTimeInMs
      32  UTIL_WaitTimeInUs
     308  dutyBuffer
     486  main
     556  pins

 
 308 bytes in section .bss
 808 bytes in section .rodata
 748 bytes in section .text
 
 748 bytes of CODE  memory
 808 bytes of CONST memory
 308 bytes of DATA  memory

Errors: none
Warnings: 1
