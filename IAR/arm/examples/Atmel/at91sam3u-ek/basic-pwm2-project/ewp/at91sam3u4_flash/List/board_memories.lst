###############################################################################
#                                                                             #
#                                                       28/Feb/2012  20:28:07 #
# IAR ANSI C/C++ Compiler V6.30.6.33336/W32 KICKSTART for ARM                 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91lib\boards\at91sam3u-ek\board_memories.c    #
#    Command line =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91lib\boards\at91sam3u-ek\board_memories.c    #
#                    -D at91sam3u4 -D flash -D TRACE_LEVEL=4 -lC              #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\List\ --remarks --diag_suppress Pe826,Pe1375 -o    #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\Obj\ --debug --endian=little --cpu=Cortex-M3 -e    #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0                           #
#                    Kickstart_2\arm\INC\c\DLib_Config_Full.h" -I             #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\..\..\..\at #
#                    91lib/peripherals\ -I C:\Users\Martin\Documents\AtmelAdv #
#                    entures\IAR\arm\examples\Atmel\at91sam3u-ek\basic-pwm2-p #
#                    roject\ewp\..\..\..\at91lib/components\ -I               #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\..\..\..\at #
#                    91lib\ -I C:\Users\Martin\Documents\AtmelAdventures\IAR\ #
#                    arm\examples\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\. #
#                    .\..\..\external_libs\ -I C:\Users\Martin\Documents\Atme #
#                    lAdventures\IAR\arm\examples\Atmel\at91sam3u-ek\basic-pw #
#                    m2-project\ewp\..\..\..\at91lib/boards/at91sam3u-ek\     #
#                    -Ohz --use_c++_inline                                    #
#    List file    =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\List\board_memories.lst                            #
#    Object file  =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\Obj\board_memories.o                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\examples\Atmel\at91lib\boards\at91sam3u-ek\board_memories.c
      1          /* ----------------------------------------------------------------------------
      2           *         ATMEL Microcontroller Software Support 
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2009, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /*
     31              Title: Memories implementation
     32          */
     33          
     34          //------------------------------------------------------------------------------
     35          //         Headers
     36          //------------------------------------------------------------------------------
     37          
     38          #include <board.h>
     39          #include <pio/pio.h>
     40          
     41          //------------------------------------------------------------------------------
     42          //         Exported functions
     43          //------------------------------------------------------------------------------
     44          
     45          //------------------------------------------------------------------------------
     46          /// Configures the EBI for NandFlash access. Pins must be configured after or
     47          /// before calling this function.
     48          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     49          void BOARD_ConfigureNandFlash(unsigned char busWidth)
     50          {
     51          #if defined(CHIP_NAND_CTRL)
     52              AT91PS_HSMC4 pHSMC4 = AT91C_BASE_HSMC4;    
     53          #endif
     54              AT91PS_HSMC4_CS pSMC = AT91C_BASE_HSMC4_CS1;
     55          
     56              // Open EBI clock
     57              AT91C_BASE_PMC->PMC_PCER = (1<< AT91C_ID_HSMC4);
   \                     BOARD_ConfigureNandFlash:
   \   00000000   0x....             LDR.N    R1,??DataTable1  ;; 0x400e0410
   \   00000002   0xF44F 0x7200      MOV      R2,#+512
   \   00000006   0x600A             STR      R2,[R1, #+0]
     58           
     59          #if defined(CHIP_NAND_CTRL)
     60              // Enable the Nand Flash Controller
     61              pHSMC4 ->HSMC4_CTRL = AT91C_HSMC4_NFCEN;
     62          #endif
     63              
     64              pSMC->HSMC4_SETUP = 0
     65                              | ((0 <<  0) & AT91C_HSMC4_NWE_SETUP)
     66                              | ((1 <<  8) & AT91C_HSMC4_NCS_WR_SETUP)
     67                              | ((0 << 16) & AT91C_HSMC4_NRD_SETUP)
     68                              | ((1 << 24) & AT91C_HSMC4_NCS_RD_SETUP);
   \   00000008   0x....             LDR.N    R1,??DataTable1_1  ;; 0x400e0084
   \   0000000A   0xF04F 0x2201      MOV      R2,#+16777472
   \   0000000E   0x600A             STR      R2,[R1, #+0]
     69          
     70              pSMC->HSMC4_PULSE = 0
     71                              | ((2 <<  0) & AT91C_HSMC4_NWE_PULSE)
     72                              | ((3 <<  8) & AT91C_HSMC4_NCS_WR_PULSE)
     73                              | ((3 << 16) & AT91C_HSMC4_NRD_PULSE)
     74                              | ((4 << 24) & AT91C_HSMC4_NCS_RD_PULSE);
   \   00000010   0x....             LDR.N    R2,??DataTable1_2  ;; 0x4030302
   \   00000012   0x604A             STR      R2,[R1, #+4]
     75          
     76              pSMC->HSMC4_CYCLE = 0
     77                            | ((4 <<  0) & AT91C_HSMC4_NWE_CYCLE)
     78                            | ((7 << 16) & AT91C_HSMC4_NRD_CYCLE);
   \   00000014   0x....             LDR.N    R2,??DataTable1_3  ;; 0x70004
   \   00000016   0x608A             STR      R2,[R1, #+8]
     79          
     80              pSMC->HSMC4_TIMINGS = 0
                                           ^
Remark[Pe068]: integer conversion resulted in a change of sign
     81                              | ((1 <<  0) & AT91C_HSMC4_TCLR) // CLE to REN
     82                              | ((2 <<  4) & AT91C_HSMC4_TADL) // ALE to Data
     83                              | ((1 <<  8) & AT91C_HSMC4_TAR)  // ALE to REN
     84                              | ((1 << 16) & AT91C_HSMC4_TRR)  // Ready to REN
     85                              | ((2 << 24) & AT91C_HSMC4_TWB)  // WEN to REN
     86                              | (7<<28)
     87                              |(AT91C_HSMC4_NFSEL)              // Nand Flash Timing
     88                              ;
   \   00000018   0x....             LDR.N    R2,??DataTable1_4  ;; 0xf2010121
   \   0000001A   0x60CA             STR      R2,[R1, #+12]
     89              
     90                  
     91              if (busWidth == 8) {
   \   0000001C   0x2808             CMP      R0,#+8
   \   0000001E   0xBF08             IT       EQ 
   \   00000020   0x2003             MOVEQ    R0,#+3
     92                  pSMC->HSMC4_MODE = AT91C_HSMC4_DBW_WIDTH_EIGTH_BITS | AT91C_HSMC4_READ_MODE | AT91C_HSMC4_WRITE_MODE;
   \   00000022   0xD003             BEQ.N    ??BOARD_ConfigureNandFlash_0
     93              }
     94              else if (busWidth == 16) {
   \   00000024   0x2810             CMP      R0,#+16
   \   00000026   0xD102             BNE.N    ??BOARD_ConfigureNandFlash_1
     95                  pSMC->HSMC4_MODE = AT91C_HSMC4_DBW_WIDTH_SIXTEEN_BITS | AT91C_HSMC4_READ_MODE | AT91C_HSMC4_WRITE_MODE;
   \   00000028   0xF241 0x0003      MOVW     R0,#+4099
   \                     ??BOARD_ConfigureNandFlash_0:
   \   0000002C   0x6108             STR      R0,[R1, #+16]
     96              }
     97          }
   \                     ??BOARD_ConfigureNandFlash_1:
   \   0000002E   0x4770             BX       LR               ;; return
     98          
     99          //------------------------------------------------------------------------------
    100          /// Function to initialize and configure the PSRAM
    101          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    102          void BOARD_ConfigurePsram(void) 
    103          {
   \                     BOARD_ConfigurePsram:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB0C9             SUB      SP,SP,#+292
    104              const Pin pinPsram[] = {BOARD_PSRAM_PINS};
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable1_5
   \   00000008   0xF44F 0x7290      MOV      R2,#+288
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy4
    105              unsigned int tmp;
    106          
    107              // Open EBI clock
    108              AT91C_BASE_PMC->PMC_PCER = (1<< AT91C_ID_HSMC4);
   \   00000010   0x....             LDR.N    R0,??DataTable1  ;; 0x400e0410
   \   00000012   0xF44F 0x7100      MOV      R1,#+512
   \   00000016   0x6001             STR      R1,[R0, #+0]
    109          
    110              // Configure I/O
    111              PIO_Configure(pinPsram, PIO_LISTSIZE(pinPsram));
   \   00000018   0x2109             MOVS     R1,#+9
   \   0000001A   0xA800             ADD      R0,SP,#+0
   \   0000001C   0x.... 0x....      BL       PIO_Configure
    112          
    113              // Setup the PSRAM (HSMC4_EBI.CS0, 0x60000000 ~ 0x60FFFFFF)
    114              AT91C_BASE_HSMC4_CS0->HSMC4_SETUP = 0
    115                                  | ((1 <<  0) & AT91C_HSMC4_NWE_SETUP)
    116                                  | ((1 <<  8) & AT91C_HSMC4_NCS_WR_SETUP)
    117                                  | ((1 << 16) & AT91C_HSMC4_NRD_SETUP)
    118                                  | ((1 << 24) & AT91C_HSMC4_NCS_RD_SETUP)
    119                                  ;
   \   00000020   0x....             LDR.N    R0,??DataTable1_6  ;; 0x400e0070
   \   00000022   0xF04F 0x3101      MOV      R1,#+16843009
   \   00000026   0x6001             STR      R1,[R0, #+0]
    120              AT91C_BASE_HSMC4_CS0->HSMC4_PULSE = 0
    121                                  | ((5 <<  0) & AT91C_HSMC4_NWE_PULSE)
    122                                  | ((5 <<  8) & AT91C_HSMC4_NCS_WR_PULSE)
    123                                  | ((5 << 16) & AT91C_HSMC4_NRD_PULSE)
    124                                  | ((5 << 24) & AT91C_HSMC4_NCS_RD_PULSE)
    125                                  ;
   \   00000028   0xF04F 0x3105      MOV      R1,#+84215045
   \   0000002C   0x6041             STR      R1,[R0, #+4]
    126              AT91C_BASE_HSMC4_CS0->HSMC4_CYCLE = 0
    127                                  | ((6 <<  0) & AT91C_HSMC4_NWE_CYCLE)
    128                                  | ((6 << 16) & AT91C_HSMC4_NRD_CYCLE)
    129                                  ;
   \   0000002E   0xF04F 0x1106      MOV      R1,#+393222
   \   00000032   0x6081             STR      R1,[R0, #+8]
    130          
    131              tmp = AT91C_BASE_HSMC4_CS0->HSMC4_TIMINGS
    132                  & (AT91C_HSMC4_OCMSEN | AT91C_HSMC4_RBNSEL | AT91C_HSMC4_NFSEL);
                           ^
Remark[Pe068]: integer conversion resulted in a change of sign
   \   00000034   0x68C1             LDR      R1,[R0, #+12]
    133              AT91C_BASE_HSMC4_CS0->HSMC4_TIMINGS = tmp
    134                                  | ((0 <<  0) & AT91C_HSMC4_TCLR) // CLE to REN
    135                                  | ((0 <<  4) & AT91C_HSMC4_TADL) // ALE to Data
    136                                  | ((0 <<  8) & AT91C_HSMC4_TAR)  // ALE to REN
    137                                  | ((0 << 16) & AT91C_HSMC4_TRR)  // Ready to REN
    138                                  | ((0 << 24) & AT91C_HSMC4_TWB)  // WEN to REN
    139                                  ;
   \   00000036   0x....             LDR.N    R2,??DataTable1_7  ;; 0xf0001000
   \   00000038   0x4011             ANDS     R1,R2,R1
   \   0000003A   0x60C1             STR      R1,[R0, #+12]
    140              tmp = AT91C_BASE_HSMC4_CS0->HSMC4_MODE & ~(AT91C_HSMC4_DBW);
                                                              ^
Remark[Pe068]: integer conversion resulted in a change of sign
   \   0000003C   0x6901             LDR      R1,[R0, #+16]
    141              AT91C_BASE_HSMC4_CS0->HSMC4_MODE = tmp
    142                                  | (AT91C_HSMC4_READ_MODE)
    143                                  | (AT91C_HSMC4_WRITE_MODE)
    144                                  | (AT91C_HSMC4_DBW_WIDTH_SIXTEEN_BITS)
    145                                  //| (AT91C_HSMC4_PMEN)
    146                                  ;
   \   0000003E   0xF421 0x5140      BIC      R1,R1,#0x3000
   \   00000042   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000046   0xF041 0x0103      ORR      R1,R1,#0x3
   \   0000004A   0x6101             STR      R1,[R0, #+16]
    147          }
   \   0000004C   0xB049             ADD      SP,SP,#+292
   \   0000004E   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x400E0410         DC32     0x400e0410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x400E0084         DC32     0x400e0084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x04030302         DC32     0x4030302

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x00070004         DC32     0x70004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0xF2010121         DC32     0xf2010121

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     `?<Constant {{4261543424, (AT91S_PIO *)10746629`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x400E0070         DC32     0x400e0070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0xF0001000         DC32     0xf0001000

   \                                 In section .rodata, align 4
   \                     `?<Constant {{4261543424, (AT91S_PIO *)10746629`:
   \   00000000   0xFE01FE00         DC32 4261543424, 400E0E00H
   \              0x400E0E00   
   \   00000008   0x0B 0x00          DC8 11, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000001B   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
   \   00000020   0x00000040         DC32 64, 400E0E00H
   \              0x400E0E00   
   \   00000028   0x0B 0x01          DC8 11, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000003B   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
   \   00000040   0x00100000         DC32 1048576, 400E0E00H
   \              0x400E0E00   
   \   00000048   0x0B 0x00          DC8 11, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005B   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
   \   00000060   0x00080000         DC32 524288, 400E0E00H
   \              0x400E0E00   
   \   00000068   0x0B 0x00          DC8 11, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000007B   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
   \   00000080   0x00800000         DC32 8388608, 400E0E00H
   \              0x400E0E00   
   \   00000088   0x0B 0x00          DC8 11, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000009B   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
   \   000000A0   0x03F00FFF         DC32 66064383, 400E1000H
   \              0x400E1000   
   \   000000A8   0x0C 0x00          DC8 12, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000BB   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
   \   000000C0   0x00000080         DC32 128, 400E0E00H
   \              0x400E0E00   
   \   000000C8   0x0B 0x01          DC8 11, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000DB   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
   \   000000E0   0x00008000         DC32 32768, 400E1000H
   \              0x400E1000   
   \   000000E8   0x0C 0x00          DC8 12, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000FB   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
   \   00000100   0x00000100         DC32 256, 400E0E00H
   \              0x400E0E00   
   \   00000108   0x0B 0x01          DC8 11, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000011B   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
    148          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  BOARD_ConfigureNandFlash
      296  BOARD_ConfigurePsram
             296 -> PIO_Configure
             296 -> __aeabi_memcpy4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     288  ?<Constant {{4261543424, (AT91S_PIO *)10746629
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
      48  BOARD_ConfigureNandFlash
      80  BOARD_ConfigurePsram

 
 288 bytes in section .rodata
 160 bytes in section .text
 
 160 bytes of CODE  memory
 288 bytes of CONST memory

Errors: none
Warnings: none
