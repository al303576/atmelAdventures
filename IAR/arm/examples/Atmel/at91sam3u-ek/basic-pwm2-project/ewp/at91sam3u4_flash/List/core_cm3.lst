###############################################################################
#                                                                             #
#                                                       28/Feb/2012  20:28:07 #
# IAR ANSI C/C++ Compiler V6.30.6.33336/W32 KICKSTART for ARM                 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\external_libs\cmsis\core_cm3.c                  #
#    Command line =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\external_libs\cmsis\core_cm3.c -D at91sam3u4    #
#                    -D flash -D TRACE_LEVEL=4 -lC                            #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\List\ --remarks --diag_suppress Pe826,Pe1375 -o    #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\Obj\ --debug --endian=little --cpu=Cortex-M3 -e    #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0                           #
#                    Kickstart_2\arm\INC\c\DLib_Config_Full.h" -I             #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\..\..\..\at #
#                    91lib/peripherals\ -I C:\Users\Martin\Documents\AtmelAdv #
#                    entures\IAR\arm\examples\Atmel\at91sam3u-ek\basic-pwm2-p #
#                    roject\ewp\..\..\..\at91lib/components\ -I               #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\..\..\..\at #
#                    91lib\ -I C:\Users\Martin\Documents\AtmelAdventures\IAR\ #
#                    arm\examples\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\. #
#                    .\..\..\external_libs\ -I C:\Users\Martin\Documents\Atme #
#                    lAdventures\IAR\arm\examples\Atmel\at91sam3u-ek\basic-pw #
#                    m2-project\ewp\..\..\..\at91lib/boards/at91sam3u-ek\     #
#                    -Ohz --use_c++_inline                                    #
#    List file    =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\List\core_cm3.lst                                  #
#    Object file  =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\Obj\core_cm3.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\examples\Atmel\external_libs\cmsis\core_cm3.c
      1          /******************************************************************************
      2           * @file:    core_cm3.c
      3           * @purpose: CMSIS Cortex-M3 Core Peripheral Access Layer Source File
      4           * @version: V1.10
      5           * @date:    24. Feb. 2009
      6           *----------------------------------------------------------------------------
      7           *
      8           * Copyright (C) 2009 ARM Limited. All rights reserved.
      9           *
     10           * ARM Limited (ARM) is supplying this software for use with Cortex-Mx 
     11           * processor based microcontrollers.  This file can be freely distributed 
     12           * within development tools that are supporting such ARM based processors. 
     13           *
     14           * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
     15           * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
     16           * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
     17           * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
     18           * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
     19           *
     20           ******************************************************************************/
     21          
     22          
     23          
     24          #include <stdint.h>
     25          
     26          
     27          /* define compiler specific symbols */
     28          #if defined   ( __CC_ARM   )
     29            #define __ASM            __asm           /*!< asm keyword for armcc          */
     30            #define __INLINE         __inline        /*!< inline keyword for armcc        */
     31          
     32          #elif defined ( __ICCARM__ )
     33            #define __ASM           __asm            /*!< asm keyword for iarcc           */
     34            #define __INLINE        inline           /*!< inline keyword for iarcc. Only avaiable in High optimization mode! */
     35            #define __nop           __no_operation   /*!< no operation intrinsic in iarcc */
     36          
     37          #elif defined (  __GNUC__  )
     38            #define __ASM             asm            /*!< asm keyword for gcc            */
     39            #define __INLINE          inline         /*!< inline keyword for gcc         */
     40          #endif
     41          
     42          
     43          
     44          #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
     45          
     46          /**
     47           * @brief  Return the Process Stack Pointer
     48           *
     49           * @param  none
     50           * @return uint32_t ProcessStackPointer
     51           *
     52           * Return the actual process stack pointer
     53           */
     54          __ASM uint32_t __get_PSP(void)
     55          {
     56            mrs r0, psp
     57            bx lr
     58          }
     59          
     60          /**
     61           * @brief  Set the Process Stack Pointer
     62           *
     63           * @param  uint32_t Process Stack Pointer
     64           * @return none
     65           *
     66           * Assign the value ProcessStackPointer to the MSP 
     67           * (process stack pointer) Cortex processor register
     68           */
     69          __ASM void __set_PSP(uint32_t topOfProcStack)
     70          {
     71            msr psp, r0
     72            bx lr
     73          }
     74          
     75          /**
     76           * @brief  Return the Main Stack Pointer
     77           *
     78           * @param  none
     79           * @return uint32_t Main Stack Pointer
     80           *
     81           * Return the current value of the MSP (main stack pointer)
     82           * Cortex processor register
     83           */
     84          __ASM uint32_t __get_MSP(void)
     85          {
     86            mrs r0, msp
     87            bx lr
     88          }
     89          
     90          /**
     91           * @brief  Set the Main Stack Pointer
     92           *
     93           * @param  uint32_t Main Stack Pointer
     94           * @return none
     95           *
     96           * Assign the value mainStackPointer to the MSP 
     97           * (main stack pointer) Cortex processor register
     98           */
     99          __ASM void __set_MSP(uint32_t mainStackPointer)
    100          {
    101            msr msp, r0
    102            bx lr
    103          }
    104          
    105          /**
    106           * @brief  Reverse byte order in unsigned short value
    107           *
    108           * @param  uint16_t value to reverse
    109           * @return uint32_t reversed value
    110           *
    111           * Reverse byte order in unsigned short value
    112           */
    113          __ASM uint32_t __REV16(uint16_t value)
    114          {
    115            rev16 r0, r0
    116            bx lr
    117          }
    118          
    119          /**
    120           * @brief  Reverse byte order in signed short value with sign extension to integer
    121           *
    122           * @param  int16_t value to reverse
    123           * @return int32_t reversed value
    124           *
    125           * Reverse byte order in signed short value with sign extension to integer
    126           */
    127          __ASM int32_t __REVSH(int16_t value)
    128          {
    129            revsh r0, r0
    130            bx lr
    131          }
    132          
    133          
    134          #if (__ARMCC_VERSION < 400000)
    135          
    136          /**
    137           * @brief  Remove the exclusive lock created by ldrex
    138           *
    139           * @param  none
    140           * @return none
    141           *
    142           * Removes the exclusive lock which is created by ldrex.
    143           */
    144          __ASM void __CLREX(void)
    145          {
    146            clrex
    147          }
    148          
    149          /**
    150           * @brief  Return the Base Priority value
    151           *
    152           * @param  none
    153           * @return uint32_t BasePriority
    154           *
    155           * Return the content of the base priority register
    156           */
    157          __ASM uint32_t  __get_BASEPRI(void)
    158          {
    159            mrs r0, basepri
    160            bx lr
    161          }
    162          
    163          /**
    164           * @brief  Set the Base Priority value
    165           *
    166           * @param  uint32_t BasePriority
    167           * @return none
    168           *
    169           * Set the base priority register
    170           */
    171          __ASM void __set_BASEPRI(uint32_t basePri)
    172          {
    173            msr basepri, r0
    174            bx lr
    175          }
    176          
    177          /**
    178           * @brief  Return the Priority Mask value
    179           *
    180           * @param  none
    181           * @return uint32_t PriMask
    182           *
    183           * Return the state of the priority mask bit from the priority mask
    184           * register
    185           */
    186          __ASM uint32_t __get_PRIMASK(void)
    187          {
    188            mrs r0, primask
    189            bx lr
    190          }
    191          
    192          /**
    193           * @brief  Set the Priority Mask value
    194           *
    195           * @param  uint32_t PriMask
    196           * @return none
    197           *
    198           * Set the priority mask bit in the priority mask register
    199           */
    200          __ASM void __set_PRIMASK(uint32_t priMask)
    201          {
    202            msr primask, r0
    203            bx lr
    204          }
    205          
    206          /**
    207           * @brief  Return the Fault Mask value
    208           *
    209           * @param  none
    210           * @return uint32_t FaultMask
    211           *
    212           * Return the content of the fault mask register
    213           */
    214          __ASM uint32_t  __get_FAULTMASK(void)
    215          {
    216            mrs r0, faultmask
    217            bx lr
    218          }
    219          
    220          /**
    221           * @brief  Set the Fault Mask value
    222           *
    223           * @param  uint32_t faultMask value
    224           * @return none
    225           *
    226           * Set the fault mask register
    227           */
    228          __ASM void __set_FAULTMASK(uint32_t faultMask)
    229          {
    230            msr faultmask, r0
    231            bx lr
    232          }
    233          
    234          /**
    235           * @brief  Return the Control Register value
    236           * 
    237           * @param  none
    238           * @return uint32_t Control value
    239           *
    240           * Return the content of the control register
    241           */
    242          __ASM uint32_t  __get_CONTROL(void)
    243          {
    244            mrs r0, control
    245            bx lr
    246          }
    247          
    248          /**
    249           * @brief  Set the Control Register value
    250           *
    251           * @param  uint32_t Control value
    252           * @return none
    253           *
    254           * Set the control register
    255           */
    256          __ASM void __set_CONTROL(uint32_t control)
    257          {
    258            msr control, r0
    259            bx lr
    260          }
    261          
    262          #endif /* __ARMCC_VERSION  */ 
    263          
    264          
    265          #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
    266          /* obsolete */
    267          #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
    268          
    269          /**
    270           * @brief  Return the Process Stack Pointer
    271           *
    272           * @param  none
    273           * @return uint32_t ProcessStackPointer
    274           *
    275           * Return the actual process stack pointer
    276           */
    277          uint32_t __get_PSP(void)
    278          {
    279            uint32_t result=0;
    280          
    281            __ASM volatile ("MRS %0, psp" : "=r" (result) );
    282            return(result);
    283          }
    284          
    285          /**
    286           * @brief  Set the Process Stack Pointer
    287           *
    288           * @param  uint32_t Process Stack Pointer
    289           * @return none
    290           *
    291           * Assign the value ProcessStackPointer to the MSP 
    292           * (process stack pointer) Cortex processor register
    293           */
    294          void __set_PSP(uint32_t topOfProcStack)
    295          {
    296            __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) );
    297          }
    298          
    299          /**
    300           * @brief  Return the Main Stack Pointer
    301           *
    302           * @param  none
    303           * @return uint32_t Main Stack Pointer
    304           *
    305           * Return the current value of the MSP (main stack pointer)
    306           * Cortex processor register
    307           */
    308          uint32_t __get_MSP(void)
    309          {
    310            uint32_t result=0;
    311          
    312            __ASM volatile ("MRS %0, msp" : "=r" (result) );
    313            return(result);
    314          }
    315          
    316          /**
    317           * @brief  Set the Main Stack Pointer
    318           *
    319           * @param  uint32_t Main Stack Pointer
    320           * @return none
    321           *
    322           * Assign the value mainStackPointer to the MSP 
    323           * (main stack pointer) Cortex processor register
    324           */
    325          void __set_MSP(uint32_t topOfMainStack)
    326          {
    327            __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) );
    328          }
    329          
    330          /**
    331           * @brief  Return the Base Priority value
    332           *
    333           * @param  none
    334           * @return uint32_t BasePriority
    335           *
    336           * Return the content of the base priority register
    337           */
    338          uint32_t __get_BASEPRI(void)
    339          {
    340            uint32_t result=0;
    341            
    342            __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
    343            return(result);
    344          }
    345          
    346          /**
    347           * @brief  Set the Base Priority value
    348           *
    349           * @param  uint32_t BasePriority
    350           * @return none
    351           *
    352           * Set the base priority register
    353           */
    354          void __set_BASEPRI(uint32_t value)
    355          {
    356            __ASM volatile ("MSR basepri, %0" : : "r" (value) );
    357          }
    358          
    359          /**
    360           * @brief  Return the Priority Mask value
    361           *
    362           * @param  none
    363           * @return uint32_t PriMask
    364           *
    365           * Return the state of the priority mask bit from the priority mask
    366           * register
    367           */
    368          uint32_t __get_PRIMASK(void)
    369          {
    370            uint32_t result=0;
    371          
    372            __ASM volatile ("MRS %0, primask" : "=r" (result) );
    373            return(result);
    374          }
    375          
    376          /**
    377           * @brief  Set the Priority Mask value
    378           *
    379           * @param  uint32_t PriMask
    380           * @return none
    381           *
    382           * Set the priority mask bit in the priority mask register
    383           */
    384          void __set_PRIMASK(uint32_t priMask)
    385          {
    386            __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
    387          }
    388          
    389          /**
    390           * @brief  Return the Fault Mask value
    391           *
    392           * @param  none
    393           * @return uint32_t FaultMask
    394           *
    395           * Return the content of the fault mask register
    396           */
    397          uint32_t __get_FAULTMASK(void)
    398          {
    399            uint32_t result=0;
    400            
    401            __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
    402            return(result);
    403          }
    404          
    405          /**
    406           * @brief  Set the Fault Mask value
    407           *
    408           * @param  uint32_t faultMask value
    409           * @return none
    410           *
    411           * Set the fault mask register
    412           */
    413          void __set_FAULTMASK(uint32_t faultMask)
    414          {
    415            __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
    416          }
    417          
    418          /**
    419           * @brief  Reverse byte order in integer value
    420           *
    421           * @param  uint32_t value to reverse
    422           * @return uint32_t reversed value
    423           *
    424           * Reverse byte order in integer value
    425           */
    426          uint32_t __REV(uint32_t value)
    427          {
    428            uint32_t result=0;
    429            
    430            __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
    431            return(result);
    432          }
    433          
    434          /**
    435           * @brief  Reverse byte order in unsigned short value
    436           *
    437           * @param  uint16_t value to reverse
    438           * @return uint32_t reversed value
    439           *
    440           * Reverse byte order in unsigned short value
    441           */
    442          uint32_t __REV16(uint16_t value)
    443          {
    444            uint32_t result=0;
    445            
    446            __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
    447            return(result);
    448          }
    449          
    450          /**
    451           * @brief  Reverse byte order in signed short value with sign extension to integer
    452           *
    453           * @param  int32_t value to reverse
    454           * @return int32_t reversed value
    455           *
    456           * Reverse byte order in signed short value with sign extension to integer
    457           */
    458          int32_t __REVSH(int16_t value)
    459          {
    460            uint32_t result=0;
    461            
    462            __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
    463            return(result);
    464          }
    465          
    466          /**
    467           * @brief  Reverse bit order of value
    468           *
    469           * @param  uint32_t value to reverse
    470           * @return uint32_t reversed value
    471           *
    472           * Reverse bit order of value
    473           */
    474          uint32_t __RBIT(uint32_t value)
    475          {
    476            uint32_t result=0;
    477            
    478             __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    479             return(result);
    480          }
    481          
    482          /**
    483           * @brief  LDR Exclusive
    484           *
    485           * @param  uint8_t* address
    486           * @return uint8_t value of (*address)
    487           *
    488           * Exclusive LDR command
    489           */
    490          uint8_t __LDREXB(uint8_t *addr)
    491          {
    492              uint8_t result=0;
    493            
    494             __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
    495             return(result);
    496          }
    497          
    498          /**
    499           * @brief  LDR Exclusive
    500           *
    501           * @param  uint16_t* address
    502           * @return uint16_t value of (*address)
    503           *
    504           * Exclusive LDR command
    505           */
    506          uint16_t __LDREXH(uint16_t *addr)
    507          {
    508              uint16_t result=0;
    509            
    510             __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
    511             return(result);
    512          }
    513          
    514          /**
    515           * @brief  LDR Exclusive
    516           *
    517           * @param  uint32_t* address
    518           * @return uint32_t value of (*address)
    519           *
    520           * Exclusive LDR command
    521           */
    522          uint32_t __LDREXW(uint32_t *addr)
    523          {
    524              uint32_t result=0;
    525            
    526             __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    527             return(result);
    528          }
    529          
    530          /**
    531           * @brief  STR Exclusive
    532           *
    533           * @param  uint8_t *address
    534           * @param  uint8_t value to store
    535           * @return uint32_t successful / failed
    536           *
    537           * Exclusive STR command
    538           */
    539          uint32_t __STREXB(uint8_t value, uint8_t *addr)
    540          {
    541             uint32_t result=0;
    542            
    543             __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
    544             return(result);
    545          }
    546          
    547          /**
    548           * @brief  STR Exclusive
    549           *
    550           * @param  uint16_t *address
    551           * @param  uint16_t value to store
    552           * @return uint32_t successful / failed
    553           *
    554           * Exclusive STR command
    555           */
    556          uint32_t __STREXH(uint16_t value, uint16_t *addr)
    557          {
    558             uint32_t result=0;
    559            
    560             __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
    561             return(result);
    562          }
    563          
    564          /**
    565           * @brief  STR Exclusive
    566           *
    567           * @param  uint32_t *address
    568           * @param  uint32_t value to store
    569           * @return uint32_t successful / failed
    570           *
    571           * Exclusive STR command
    572           */
    573          uint32_t __STREXW(uint32_t value, uint32_t *addr)
    574          {
    575             uint32_t result=0;
    576            
    577             __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
    578             return(result);
    579          }
    580          
    581          /**
    582           * @brief  Return the Control Register value
    583           * 
    584           * @param  none
    585           * @return uint32_t Control value
    586           *
    587           * Return the content of the control register
    588           */
    589          uint32_t __get_CONTROL(void)
    590          {
    591            uint32_t result=0;
    592          
    593            __ASM volatile ("MRS %0, control" : "=r" (result) );
    594            return(result);
    595          }
    596          
    597          /**
    598           * @brief  Set the Control Register value
    599           *
    600           * @param  uint32_t Control value
    601           * @return none
    602           *
    603           * Set the control register
    604           */
    605          void __set_CONTROL(uint32_t control)
    606          {
    607            __ASM volatile ("MSR control, %0" : : "r" (control) );
    608          }
    609          
    610          #endif
    611          
    612          
    613          
    614          
    615          
    616          
    617          
    618          
    619          
    620          
    621          
    622          
    623          
    624          
    625          
    626          
    627          


 

 


Errors: none
Warnings: none
