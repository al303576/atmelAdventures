###############################################################################
#                                                                             #
#                                                       28/Feb/2012  20:28:08 #
# IAR ANSI C/C++ Compiler V6.30.6.33336/W32 KICKSTART for ARM                 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91lib\peripherals\pmc\pmc.c                   #
#    Command line =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91lib\peripherals\pmc\pmc.c -D at91sam3u4 -D  #
#                    flash -D TRACE_LEVEL=4 -lC C:\Users\Martin\Documents\Atm #
#                    elAdventures\IAR\arm\examples\Atmel\at91sam3u-ek\basic-p #
#                    wm2-project\ewp\at91sam3u4_flash\List\ --remarks         #
#                    --diag_suppress Pe826,Pe1375 -o                          #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\Obj\ --debug --endian=little --cpu=Cortex-M3 -e    #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0                           #
#                    Kickstart_2\arm\INC\c\DLib_Config_Full.h" -I             #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\..\..\..\at #
#                    91lib/peripherals\ -I C:\Users\Martin\Documents\AtmelAdv #
#                    entures\IAR\arm\examples\Atmel\at91sam3u-ek\basic-pwm2-p #
#                    roject\ewp\..\..\..\at91lib/components\ -I               #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\..\..\..\at #
#                    91lib\ -I C:\Users\Martin\Documents\AtmelAdventures\IAR\ #
#                    arm\examples\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\. #
#                    .\..\..\external_libs\ -I C:\Users\Martin\Documents\Atme #
#                    lAdventures\IAR\arm\examples\Atmel\at91sam3u-ek\basic-pw #
#                    m2-project\ewp\..\..\..\at91lib/boards/at91sam3u-ek\     #
#                    -Ohz --use_c++_inline                                    #
#    List file    =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\List\pmc.lst                                       #
#    Object file  =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\Obj\pmc.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\examples\Atmel\at91lib\peripherals\pmc\pmc.c
      1          /* ----------------------------------------------------------------------------
      2           *         ATMEL Microcontroller Software Support 
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2008, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          //------------------------------------------------------------------------------
     31          //         Headers
     32          //------------------------------------------------------------------------------
     33          
     34          #include "pmc.h"
     35          #include <board.h>
     36          #include <utility/assert.h>
     37          #include <utility/trace.h>
     38          
     39          #ifdef CP15_PRESENT
     40          #include <cp15/cp15.h>
     41          #endif
     42          
     43          #define MASK_STATUS 0x3FFFFFFC
     44          
     45          //------------------------------------------------------------------------------
     46          //         Global functions
     47          //------------------------------------------------------------------------------
     48          
     49          #if defined(at91sam7l64) || defined(at91sam7l128)
     50          //------------------------------------------------------------------------------
     51          /// Sets the fast wake-up inputs that can get the device out of Wait mode.
     52          /// \param inputs  Fast wake-up inputs to enable.
     53          //------------------------------------------------------------------------------
     54          void PMC_SetFastWakeUpInputs(unsigned int inputs)
     55          {
     56              SANITY_CHECK((inputs & ~0xFF) == 0);
     57              AT91C_BASE_PMC->PMC_FSMR = inputs;
     58          }
     59          
     60          #if !defined(__ICCARM__)
     61          __attribute__ ((section (".ramfunc"))) // GCC
     62          #endif
     63          //------------------------------------------------------------------------------
     64          /// Disables the main oscillator, making the device enter Wait mode.
     65          //------------------------------------------------------------------------------
     66          void PMC_DisableMainOscillatorForWaitMode(void)
     67          {
     68              AT91C_BASE_PMC->PMC_MOR = 0x37 << 16;
     69              while ((AT91C_BASE_PMC->PMC_MOR & AT91C_PMC_MAINSELS) != AT91C_PMC_MAINSELS);
     70          }
     71          
     72          #endif
     73          
     74          #if defined(at91sam7l)
     75          //------------------------------------------------------------------------------
     76          /// Disables the main oscillator when NOT running on it.
     77          //------------------------------------------------------------------------------
     78          void PMC_DisableMainOscillator(void)
     79          {
     80              AT91C_BASE_PMC->PMC_MOR = 0x37 << 16;
     81              while ((AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MAINSELS) == AT91C_PMC_MAINSELS);
     82          }
     83          #endif
     84          
     85          //------------------------------------------------------------------------------
     86          /// Disables the processor clock
     87          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     88          void PMC_DisableProcessorClock(void)
     89          {    
     90              AT91C_BASE_PMC->PMC_SCDR = AT91C_PMC_PCK;   
   \                     PMC_DisableProcessorClock:
   \   00000000   0x....             LDR.N    R0,??DataTable6  ;; 0x400e0404
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x6001             STR      R1,[R0, #+0]
     91              while ((AT91C_BASE_PMC->PMC_SCSR & AT91C_PMC_PCK) != AT91C_PMC_PCK); 
   \                     ??PMC_DisableProcessorClock_0:
   \   00000006   0x6841             LDR      R1,[R0, #+4]
   \   00000008   0x07C9             LSLS     R1,R1,#+31
   \   0000000A   0xD5FC             BPL.N    ??PMC_DisableProcessorClock_0
     92          }
   \   0000000C   0x4770             BX       LR               ;; return
     93          
     94          //------------------------------------------------------------------------------
     95          /// Enables the clock of a peripheral. The peripheral ID (AT91C_ID_xxx) is used
     96          /// to identify which peripheral is targetted.
     97          /// Note that the ID must NOT be shifted (i.e. 1 << AT91C_ID_xxx).
     98          /// \param id  Peripheral ID (AT91C_ID_xxx).
     99          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    100          void PMC_EnablePeripheral(unsigned int id)
    101          {
   \                     PMC_EnablePeripheral:
   \   00000000   0xB510             PUSH     {R4,LR}
    102              SANITY_CHECK(id < 32);
   \   00000002   0x....             LDR.N    R4,??DataTable6_1
   \   00000004   0x2820             CMP      R0,#+32
   \   00000006   0xD306             BCC.N    ??PMC_EnablePeripheral_0
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       printf
   \   0000000E   0x2266             MOVS     R2,#+102
   \   00000010   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_1:
   \   00000014   0xE7FE             B.N      ??CrossCallReturnLabel_1
    103          
    104              if ((AT91C_BASE_PMC->PMC_PCSR & (1 << id)) == (1 << id)) {
   \                     ??PMC_EnablePeripheral_0:
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x4081             LSLS     R1,R1,R0
   \   0000001A   0x....             LDR.N    R2,??DataTable6_2  ;; 0x400e0410
   \   0000001C   0x6893             LDR      R3,[R2, #+8]
   \   0000001E   0x400B             ANDS     R3,R1,R3
   \   00000020   0x428B             CMP      R3,R1
   \   00000022   0xD103             BNE.N    ??PMC_EnablePeripheral_1
    105          
    106                  TRACE_INFO("PMC_EnablePeripheral: clock of peripheral"
    107                             " %u is already enabled\n\r",
    108                             id);
   \   00000024   0x4601             MOV      R1,R0
   \   00000026   0xF104 0x0090      ADD      R0,R4,#+144
   \   0000002A   0x....             B.N      ?Subroutine0
    109              }
    110              else {
    111          
    112                  AT91C_BASE_PMC->PMC_PCER = 1 << id;
   \                     ??PMC_EnablePeripheral_1:
   \   0000002C   0x6011             STR      R1,[R2, #+0]
    113              }
    114          }
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0xF104 0x0130      ADD      R1,R4,#+48
   \   00000004   0xF104 0x0010      ADD      R0,R4,#+16
   \   00000008   0x.... 0x....      B.W      printf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xE8BD 0x4010      POP      {R4,LR}
   \   00000004   0x.... 0x....      B.W      printf
    115          
    116          //------------------------------------------------------------------------------
    117          /// Disables the clock of a peripheral. The peripheral ID (AT91C_ID_xxx) is used
    118          /// to identify which peripheral is targetted.
    119          /// Note that the ID must NOT be shifted (i.e. 1 << AT91C_ID_xxx).
    120          /// \param id  Peripheral ID (AT91C_ID_xxx).
    121          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    122          void PMC_DisablePeripheral(unsigned int id)
    123          {
   \                     PMC_DisablePeripheral:
   \   00000000   0xB510             PUSH     {R4,LR}
    124              SANITY_CHECK(id < 32);
   \   00000002   0x....             LDR.N    R4,??DataTable6_1
   \   00000004   0x2820             CMP      R0,#+32
   \   00000006   0xD306             BCC.N    ??PMC_DisablePeripheral_0
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       printf
   \   0000000E   0x227C             MOVS     R2,#+124
   \   00000010   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_0:
   \   00000014   0xE7FE             B.N      ??CrossCallReturnLabel_0
    125          
    126              if ((AT91C_BASE_PMC->PMC_PCSR & (1 << id)) != (1 << id)) {
   \                     ??PMC_DisablePeripheral_0:
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x4081             LSLS     R1,R1,R0
   \   0000001A   0x....             LDR.N    R2,??DataTable6_3  ;; 0x400e0414
   \   0000001C   0x6853             LDR      R3,[R2, #+4]
   \   0000001E   0x400B             ANDS     R3,R1,R3
   \   00000020   0x428B             CMP      R3,R1
   \   00000022   0xD003             BEQ.N    ??PMC_DisablePeripheral_1
    127          
    128                  TRACE_INFO("PMC_DisablePeripheral: clock of peripheral"
    129                             " %u is not enabled\n\r",
    130                             id);
   \   00000024   0x4601             MOV      R1,R0
   \   00000026   0xF104 0x00D8      ADD      R0,R4,#+216
   \   0000002A   0x....             B.N      ?Subroutine0
    131              }
    132              else {
    133          
    134                  AT91C_BASE_PMC->PMC_PCDR = 1 << id;
   \                     ??PMC_DisablePeripheral_1:
   \   0000002C   0x6011             STR      R1,[R2, #+0]
    135              }
    136          }
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    137          
    138          //------------------------------------------------------------------------------
    139          /// Enable all the periph clock via PMC
    140          /// (Becareful of the last 2 bits, it is not periph clock)
    141          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    142          void PMC_EnableAllPeripherals(void)
    143          {
    144              AT91C_BASE_PMC->PMC_PCER = MASK_STATUS;
   \                     PMC_EnableAllPeripherals:
   \   00000000   0x....             LDR.N    R0,??DataTable6_2  ;; 0x400e0410
   \   00000002   0x....             LDR.N    R1,??DataTable6_4  ;; 0x3ffffffc
   \   00000004   0x6001             STR      R1,[R0, #+0]
    145              while( (AT91C_BASE_PMC->PMC_PCSR & MASK_STATUS) != MASK_STATUS);
   \                     ??PMC_EnableAllPeripherals_0:
   \   00000006   0x6882             LDR      R2,[R0, #+8]
   \   00000008   0x400A             ANDS     R2,R1,R2
   \   0000000A   0x428A             CMP      R2,R1
   \   0000000C   0xD1FB             BNE.N    ??PMC_EnableAllPeripherals_0
    146              TRACE_INFO("Enable all periph clocks\n\r"); 
   \   0000000E   0x....             LDR.N    R0,??DataTable6_5
   \   00000010   0x.... 0x....      B.W      printf
    147          }
    148          
    149          //------------------------------------------------------------------------------
    150          /// Disable all the periph clock via PMC
    151          /// (Becareful of the last 2 bits, it is not periph clock)
    152          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    153          void PMC_DisableAllPeripherals(void)
    154          {
    155              AT91C_BASE_PMC->PMC_PCDR = MASK_STATUS;
   \                     PMC_DisableAllPeripherals:
   \   00000000   0x....             LDR.N    R0,??DataTable6_3  ;; 0x400e0414
   \   00000002   0x....             LDR.N    R1,??DataTable6_4  ;; 0x3ffffffc
   \   00000004   0x6001             STR      R1,[R0, #+0]
    156              while((AT91C_BASE_PMC->PMC_PCSR & MASK_STATUS) != 0);
   \                     ??PMC_DisableAllPeripherals_0:
   \   00000006   0x6842             LDR      R2,[R0, #+4]
   \   00000008   0x420A             TST      R2,R1
   \   0000000A   0xD1FC             BNE.N    ??PMC_DisableAllPeripherals_0
    157              TRACE_INFO("Disable all periph clocks\n\r");
   \   0000000C   0x....             LDR.N    R0,??DataTable6_6
   \   0000000E   0x.... 0x....      B.W      printf
    158          }
    159          
    160          //-----------------------------------------------------------------------------
    161          /// Get Periph Status
    162          //-----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    163          unsigned int PMC_IsAllPeriphEnabled(void)
    164          {
    165              return (AT91C_BASE_PMC->PMC_PCSR == MASK_STATUS);
   \                     PMC_IsAllPeriphEnabled:
   \   00000000   0x....             LDR.N    R0,??DataTable6_7  ;; 0x400e0418
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x....             LDR.N    R1,??DataTable6_4  ;; 0x3ffffffc
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD101             BNE.N    ??PMC_IsAllPeriphEnabled_0
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x4770             BX       LR
   \                     ??PMC_IsAllPeriphEnabled_0:
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x4770             BX       LR               ;; return
    166          }
    167          
    168          //-----------------------------------------------------------------------------
    169          /// Get Periph Status
    170          //-----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    171          unsigned int PMC_IsPeriphEnabled(unsigned int id)
    172          {
    173              return (AT91C_BASE_PMC->PMC_PCSR & (1 << id));  
   \                     PMC_IsPeriphEnabled:
   \   00000000   0x....             LDR.N    R1,??DataTable6_7  ;; 0x400e0418
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0xFA02 0xF000      LSL      R0,R2,R0
   \   0000000A   0x4008             ANDS     R0,R0,R1
   \   0000000C   0x4770             BX       LR               ;; return
    174          }
    175          //------------------------------------------------------------------------------
    176          /// Put the CPU in Idle Mode for lower consumption
    177          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    178          void PMC_CPUInIdleMode(void)
    179          {
    180          #ifndef CP15_PRESENT	
    181              PMC_DisableProcessorClock();
   \                     PMC_CPUInIdleMode:
   \   00000000   0x....             B.N      PMC_DisableProcessorClock
    182          #else
    183              AT91C_BASE_PMC->PMC_SCDR = AT91C_PMC_PCK; 
    184              CP15_WaitForInterrupt();
    185          #endif
    186          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x400E0404         DC32     0x400e0404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     `?<Constant "-F- ASSERT: ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x400E0410         DC32     0x400e0410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x400E0414         DC32     0x400e0414

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x3FFFFFFC         DC32     0x3ffffffc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     `?<Constant "-I- Enable all periph...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     `?<Constant "-I- Disable all perip...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x400E0418         DC32     0x400e0418

   \                                 In section .rodata, align 4
   \                     `?<Constant "-F- ASSERT: ">`:
   \   00000000   0x2D 0x46          DC8 "-F- ASSERT: "
   \              0x2D 0x20    
   \              0x41 0x53    
   \              0x53 0x45    
   \              0x52 0x54    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \   00000010   0x53 0x61          DC8 "Sanity check failed at %s:%d\012\015"
   \              0x6E 0x69    
   \              0x74 0x79    
   \              0x20 0x63    
   \              0x68 0x65    
   \              0x63 0x6B    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x61 0x74    
   \              0x20 0x25    
   \              0x73 0x3A    
   \              0x25 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \   0000002F   0x00               DC8 0
   \   00000030   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000038   0x5C 0x4D          DC8 5CH, 4DH, 61H, 72H, 74H, 69H, 6EH, 5CH
   \              0x61 0x72    
   \              0x74 0x69    
   \              0x6E 0x5C    
   \   00000040   0x44 0x6F          DC8 44H, 6FH, 63H, 75H, 6DH, 65H, 6EH, 74H
   \              0x63 0x75    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \   00000048   0x73 0x5C          DC8 73H, 5CH, 41H, 74H, 6DH, 65H, 6CH, 41H
   \              0x41 0x74    
   \              0x6D 0x65    
   \              0x6C 0x41    
   \   00000050   0x64 0x76          DC8 64H, 76H, 65H, 6EH, 74H, 75H, 72H, 65H
   \              0x65 0x6E    
   \              0x74 0x75    
   \              0x72 0x65    
   \   00000058   0x73 0x5C          DC8 73H, 5CH, 49H, 41H, 52H, 5CH, 61H, 72H
   \              0x49 0x41    
   \              0x52 0x5C    
   \              0x61 0x72    
   \   00000060   0x6D 0x5C          DC8 6DH, 5CH, 65H, 78H, 61H, 6DH, 70H, 6CH
   \              0x65 0x78    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \   00000068   0x65 0x73          DC8 65H, 73H, 5CH, 41H, 74H, 6DH, 65H, 6CH
   \              0x5C 0x41    
   \              0x74 0x6D    
   \              0x65 0x6C    
   \   00000070   0x5C 0x61          DC8 5CH, 61H, 74H, 39H, 31H, 6CH, 69H, 62H
   \              0x74 0x39    
   \              0x31 0x6C    
   \              0x69 0x62    
   \   00000078   0x5C 0x70          DC8 5CH, 70H, 65H, 72H, 69H, 70H, 68H, 65H
   \              0x65 0x72    
   \              0x69 0x70    
   \              0x68 0x65    
   \   00000080   0x72 0x61          DC8 72H, 61H, 6CH, 73H, 5CH, 70H, 6DH, 63H
   \              0x6C 0x73    
   \              0x5C 0x70    
   \              0x6D 0x63    
   \   00000088   0x5C 0x70          DC8 5CH, 70H, 6DH, 63H, 2EH, 63H, 0
   \              0x6D 0x63    
   \              0x2E 0x63    
   \              0x00         
   \   0000008F   0x00               DC8 0
   \   00000090   0x2D 0x49          DC8 2DH, 49H, 2DH, 20H, 50H, 4DH, 43H, 5FH
   \              0x2D 0x20    
   \              0x50 0x4D    
   \              0x43 0x5F    
   \   00000098   0x45 0x6E          DC8 45H, 6EH, 61H, 62H, 6CH, 65H, 50H, 65H
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x50 0x65    
   \   000000A0   0x72 0x69          DC8 72H, 69H, 70H, 68H, 65H, 72H, 61H, 6CH
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x61 0x6C    
   \   000000A8   0x3A 0x20          DC8 3AH, 20H, 63H, 6CH, 6FH, 63H, 6BH, 20H
   \              0x63 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x20    
   \   000000B0   0x6F 0x66          DC8 6FH, 66H, 20H, 70H, 65H, 72H, 69H, 70H
   \              0x20 0x70    
   \              0x65 0x72    
   \              0x69 0x70    
   \   000000B8   0x68 0x65          DC8 68H, 65H, 72H, 61H, 6CH, 20H, 25H, 75H
   \              0x72 0x61    
   \              0x6C 0x20    
   \              0x25 0x75    
   \   000000C0   0x20 0x69          DC8 20H, 69H, 73H, 20H, 61H, 6CH, 72H, 65H
   \              0x73 0x20    
   \              0x61 0x6C    
   \              0x72 0x65    
   \   000000C8   0x61 0x64          DC8 61H, 64H, 79H, 20H, 65H, 6EH, 61H, 62H
   \              0x79 0x20    
   \              0x65 0x6E    
   \              0x61 0x62    
   \   000000D0   0x6C 0x65          DC8 6CH, 65H, 64H, 0AH, 0DH, 0
   \              0x64 0x0A    
   \              0x0D 0x00    
   \   000000D6   0x00 0x00          DC8 0, 0
   \   000000D8   0x2D 0x49          DC8 2DH, 49H, 2DH, 20H, 50H, 4DH, 43H, 5FH
   \              0x2D 0x20    
   \              0x50 0x4D    
   \              0x43 0x5F    
   \   000000E0   0x44 0x69          DC8 44H, 69H, 73H, 61H, 62H, 6CH, 65H, 50H
   \              0x73 0x61    
   \              0x62 0x6C    
   \              0x65 0x50    
   \   000000E8   0x65 0x72          DC8 65H, 72H, 69H, 70H, 68H, 65H, 72H, 61H
   \              0x69 0x70    
   \              0x68 0x65    
   \              0x72 0x61    
   \   000000F0   0x6C 0x3A          DC8 6CH, 3AH, 20H, 63H, 6CH, 6FH, 63H, 6BH
   \              0x20 0x63    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \   000000F8   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 70H, 65H, 72H, 69H
   \              0x66 0x20    
   \              0x70 0x65    
   \              0x72 0x69    
   \   00000100   0x70 0x68          DC8 70H, 68H, 65H, 72H, 61H, 6CH, 20H, 25H
   \              0x65 0x72    
   \              0x61 0x6C    
   \              0x20 0x25    
   \   00000108   0x75 0x20          DC8 75H, 20H, 69H, 73H, 20H, 6EH, 6FH, 74H
   \              0x69 0x73    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \   00000110   0x20 0x65          DC8 20H, 65H, 6EH, 61H, 62H, 6CH, 65H, 64H
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x64    
   \   00000118   0x0A 0x0D          DC8 0AH, 0DH, 0
   \              0x00         
   \   0000011B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "-I- Enable all periph...">`:
   \   00000000   0x2D 0x49          DC8 "-I- Enable all periph clocks\012\015"
   \              0x2D 0x20    
   \              0x45 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x61    
   \              0x6C 0x6C    
   \              0x20 0x70    
   \              0x65 0x72    
   \              0x69 0x70    
   \              0x68 0x20    
   \              0x63 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x73    
   \              0x0A 0x0D    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "-I- Disable all perip...">`:
   \   00000000   0x2D 0x49          DC8 "-I- Disable all periph clocks\012\015"
   \              0x2D 0x20    
   \              0x44 0x69    
   \              0x73 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x61 0x6C    
   \              0x6C 0x20    
   \              0x70 0x65    
   \              0x72 0x69    
   \              0x70 0x68    
   \              0x20 0x63    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x73 0x0A    
   \              0x0D 0x00    
    187          
    188          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  PMC_CPUInIdleMode
             0 -> PMC_DisableProcessorClock
        0  PMC_DisableAllPeripherals
             0 -> printf
        8  PMC_DisablePeripheral
             0 -> printf
             8 -> printf
        0  PMC_DisableProcessorClock
        0  PMC_EnableAllPeripherals
             0 -> printf
        8  PMC_EnablePeripheral
             0 -> printf
             8 -> printf
        0  PMC_IsAllPeriphEnabled
        0  PMC_IsPeriphEnabled


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     284  ?<Constant "-F- ASSERT: ">
      32  ?<Constant "-I- Disable all perip...">
      32  ?<Constant "-I- Enable all periph...">
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       8  ?Subroutine0
      12  ?Subroutine1
       2  PMC_CPUInIdleMode
      18  PMC_DisableAllPeripherals
      48  PMC_DisablePeripheral
      14  PMC_DisableProcessorClock
      20  PMC_EnableAllPeripherals
      48  PMC_EnablePeripheral
      18  PMC_IsAllPeriphEnabled
      14  PMC_IsPeriphEnabled

 
 348 bytes in section .rodata
 234 bytes in section .text
 
 234 bytes of CODE  memory
 348 bytes of CONST memory

Errors: none
Warnings: none
