###############################################################################
#                                                                             #
#                                                       28/Feb/2012  20:28:08 #
# IAR ANSI C/C++ Compiler V6.30.6.33336/W32 KICKSTART for ARM                 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91lib\peripherals\irq\nvic.c                  #
#    Command line =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91lib\peripherals\irq\nvic.c -D at91sam3u4    #
#                    -D flash -D TRACE_LEVEL=4 -lC                            #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\List\ --remarks --diag_suppress Pe826,Pe1375 -o    #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\Obj\ --debug --endian=little --cpu=Cortex-M3 -e    #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0                           #
#                    Kickstart_2\arm\INC\c\DLib_Config_Full.h" -I             #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\..\..\..\at #
#                    91lib/peripherals\ -I C:\Users\Martin\Documents\AtmelAdv #
#                    entures\IAR\arm\examples\Atmel\at91sam3u-ek\basic-pwm2-p #
#                    roject\ewp\..\..\..\at91lib/components\ -I               #
#                    C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\..\..\..\at #
#                    91lib\ -I C:\Users\Martin\Documents\AtmelAdventures\IAR\ #
#                    arm\examples\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\. #
#                    .\..\..\external_libs\ -I C:\Users\Martin\Documents\Atme #
#                    lAdventures\IAR\arm\examples\Atmel\at91sam3u-ek\basic-pw #
#                    m2-project\ewp\..\..\..\at91lib/boards/at91sam3u-ek\     #
#                    -Ohz --use_c++_inline                                    #
#    List file    =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\List\nvic.lst                                      #
#    Object file  =  C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\exampl #
#                    es\Atmel\at91sam3u-ek\basic-pwm2-project\ewp\at91sam3u4_ #
#                    flash\Obj\nvic.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Martin\Documents\AtmelAdventures\IAR\arm\examples\Atmel\at91lib\peripherals\irq\nvic.c
      1          /* ----------------------------------------------------------------------------
      2           *         ATMEL Microcontroller Software Support 
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2008, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          //------------------------------------------------------------------------------
     31          //         Headers
     32          //------------------------------------------------------------------------------
     33          
     34          #include "board.h"
     35          #include "irq.h"
     36          #include "exceptions.h"
     37          #include <utility/trace.h>
     38          
     39          /// The index of IRQ handler in the exception table
     40          #define NVIC_IRQ_HANDLER_INDEX     16
     41          
     42          //------------------------------------------------------------------------------
     43          //         Global functions
     44          //------------------------------------------------------------------------------
     45          
     46          //------------------------------------------------------------------------------
     47          /// Configures an interrupt in the NVIC. The interrupt is identified by its
     48          /// source (AT91C_ID_xxx) and is configured to a specified priority and
     49          /// interrupt handler function. priority is the value that will be put in NVIC_IPRx
     50          /// and the function address will be set in "ExceptionTable". The parameter priority
     51          /// will include the preemptionPriority and the subPriority, where the subPriority
     52          /// defined in the B[7:0] of the parameter "priority", and the preemptionPriority defined
     53          /// in the B[15:8] of the parameter "priority". 
     54          /// The interrupt is disabled before configuration, so it is useless
     55          /// to do it before calling this function. When NVIC_ConfigureIT returns, the
     56          /// interrupt will always be disabled and cleared; it must be enabled by a
     57          /// call to NVIC_EnableIT().
     58          /// \param source               Interrupt source to configure.
     59          /// \param priority              Pre-emption priority (B[15:8] )+ subPriority (B[7:0])
     60          /// \param handler              Interrupt handler function.
     61          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     62          void IRQ_ConfigureIT(
     63              unsigned int source,
     64              //unsigned int preemptionPriority,
     65              //unsigned int subPriority,
     66              unsigned int priority,
     67              IntFunc handler)
     68          {
   \                     IRQ_ConfigureIT:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
     69              unsigned int priGroup = __NVIC_PRIO_BITS;
     70              unsigned int nPre = 8 - priGroup;
     71              unsigned int nSub = priGroup;
     72              unsigned int preemptionPriority;
     73              unsigned int subPriority;
     74              unsigned int IRQpriority;
     75          
     76              preemptionPriority = (priority & 0xff00) >> 8;
   \   00000002   0xF3C1 0x2207      UBFX     R2,R1,#+8,#+8
     77              subPriority = (priority & 0xff);
   \   00000006   0xB2C9             UXTB     R1,R1
     78          
     79              // Disable the interrupt first
     80              NVIC_DisableIRQ((IRQn_Type)source);
   \   00000008   0x2401             MOVS     R4,#+1
   \   0000000A   0xF000 0x051F      AND      R5,R0,#0x1F
   \   0000000E   0x40AC             LSLS     R4,R4,R5
   \   00000010   0xB243             SXTB     R3,R0
   \   00000012   0x095D             LSRS     R5,R3,#+5
   \   00000014   0x....             LDR.N    R6,??DataTable4  ;; 0xe000e180
   \   00000016   0xF846 0x4025      STR      R4,[R6, R5, LSL #+2]
     81          
     82              // Clear any pending status
     83              NVIC_ClearPendingIRQ((IRQn_Type)source);
   \   0000001A   0x....             LDR.N    R7,??DataTable4_1  ;; 0xe000e280
   \   0000001C   0xF847 0x4025      STR      R4,[R7, R5, LSL #+2]
     84          
     85              // Configure interrupt handler
     86              //if (handler == 0) handler = IrqHandlerNotUsed;
     87                //  GetExceptionTable()[NVIC_IRQ_HANDLER_INDEX + source] = handler;
     88          
     89              if (subPriority >= (0x01 << nSub))
                                     ^
Remark[Pe1873]: comparison between signed and unsigned operands
   \   00000020   0x2910             CMP      R1,#+16
   \   00000022   0xBF28             IT       CS 
   \   00000024   0x210F             MOVCS    R1,#+15
     90                subPriority = (0x01 << nSub) - 1;
     91              if (preemptionPriority >= (0x01 << nPre))
                                            ^
Remark[Pe1873]: comparison between signed and unsigned operands
   \   00000026   0x2A10             CMP      R2,#+16
   \   00000028   0xBF28             IT       CS 
   \   0000002A   0x220F             MOVCS    R2,#+15
     92                preemptionPriority = (0x01 << nPre) - 1;
     93          
     94              IRQpriority = (subPriority | (preemptionPriority << nSub));
     95              NVIC_SetPriority((IRQn_Type)source, IRQpriority);
   \   0000002C   0xEA41 0x1102      ORR      R1,R1,R2, LSL #+4
   \   00000030   0xB240             SXTB     R0,R0
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD507             BPL.N    ??IRQ_ConfigureIT_0
   \   00000036   0xF003 0x000F      AND      R0,R3,#0xF
   \   0000003A   0x....             LDR.N    R2,??DataTable4_2  ;; 0xe000ed18
   \   0000003C   0x1880             ADDS     R0,R0,R2
   \   0000003E   0x0109             LSLS     R1,R1,#+4
   \   00000040   0xF800 0x1C04      STRB     R1,[R0, #-4]
   \   00000044   0xBDF0             POP      {R4-R7,PC}
   \                     ??IRQ_ConfigureIT_0:
   \   00000046   0x....             LDR.N    R2,??DataTable4_3  ;; 0xe000e400
   \   00000048   0x5481             STRB     R1,[R0, R2]
     96          }
   \   0000004A   0xBDF0             POP      {R4-R7,PC}       ;; return
     97          
     98          //------------------------------------------------------------------------------
     99          /// Enables interrupt coming from the given (unique) source (AT91C_ID_xxx).
    100          /// \param source  Interrupt source to enable.
    101          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    102          void IRQ_EnableIT(unsigned int source)
    103          {
    104              NVIC_EnableIRQ((IRQn_Type)source);
   \                     IRQ_EnableIT:
   \   00000000   0xB240             SXTB     R0,R0
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0x....             LDR.N    R2,??DataTable4_4  ;; 0xe000e100
   \   00000006   0x....             B.N      ?Subroutine0
    105          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x2301             MOVS     R3,#+1
   \   00000002   0xF000 0x001F      AND      R0,R0,#0x1F
   \   00000006   0xFA03 0xF000      LSL      R0,R3,R0
   \   0000000A   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   0000000E   0x4770             BX       LR               ;; return
    106          
    107          //------------------------------------------------------------------------------
    108          /// Disables interrupt coming from the given (unique) source (AT91C_ID_xxx).
    109          /// \param source  Interrupt source to disable.
    110          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    111          void IRQ_DisableIT(unsigned int source)
    112          {
    113              NVIC_DisableIRQ((IRQn_Type)source);
   \                     IRQ_DisableIT:
   \   00000000   0xB240             SXTB     R0,R0
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0x....             LDR.N    R2,??DataTable4  ;; 0xe000e180
   \   00000006                      REQUIRE ?Subroutine0
   \   00000006                      ;; // Fall through to label ?Subroutine0
    114          }
    115          
    116          //------------------------------------------------------------------------------
    117          /// Set interrupt pending bit from the given (unique) source (AT91C_ID_xxx).
    118          /// \param source  Interrupt source to set.
    119          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    120          void NVIC_SetPending(unsigned int source)
    121          {
    122              NVIC_SetPendingIRQ((IRQn_Type)source);
   \                     NVIC_SetPending:
   \   00000000   0xB240             SXTB     R0,R0
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0x....             LDR.N    R2,??DataTable4_5  ;; 0xe000e200
   \   00000006   0x....             B.N      ?Subroutine0
    123          }
    124          
    125          //------------------------------------------------------------------------------
    126          /// Clear interrupt pending bit from the given (unique) source (AT91C_ID_xxx).
    127          /// \param source  Interrupt source to clear.
    128          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    129          void NVIC_ClrPending(unsigned int source)
    130          {
    131              NVIC_ClearPendingIRQ((IRQn_Type)source);
   \                     NVIC_ClrPending:
   \   00000000   0xB240             SXTB     R0,R0
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0x....             LDR.N    R2,??DataTable4_1  ;; 0xe000e280
   \   00000006   0x....             B.N      ?Subroutine0
    132          }
    133          
    134          #if !defined(USE_CMSIS_on)
    135          //------------------------------------------------------------------------------
    136          /// Use the Software Trigger Interrupt Register to pend an interrupt.
    137          /// \param source Interrupt source to trigger.
    138          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    139          void NVIC_Swi(unsigned int source)
    140          {
    141              AT91C_BASE_NVIC->NVIC_STIR = source;
   \                     NVIC_Swi:
   \   00000000   0x....             LDR.N    R1,??DataTable4_6  ;; 0xe000ef00
   \   00000002   0x6008             STR      R0,[R1, #+0]
    142          }
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0xE000ED18         DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0xE000E200         DC32     0xe000e200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0xE000EF00         DC32     0xe000ef00
    143          #endif
    144          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       20  IRQ_ConfigureIT
        0  IRQ_DisableIT
        0  IRQ_EnableIT
        0  NVIC_ClrPending
        0  NVIC_SetPending
        0  NVIC_Swi


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
      16  ?Subroutine0
      76  IRQ_ConfigureIT
       6  IRQ_DisableIT
       8  IRQ_EnableIT
       8  NVIC_ClrPending
       8  NVIC_SetPending
       6  NVIC_Swi

 
 156 bytes in section .text
 
 156 bytes of CODE memory

Errors: none
Warnings: none
